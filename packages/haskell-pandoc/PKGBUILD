# Maintainer: zhiayang <zhiayang@nowhere>

_hkgname=pandoc
pkgname=haskell-${_hkgname}
pkgver=3.1.2
pkgrel=1
pkgdesc="Conversion between markup formats"
url="https://hackage.haskell.org/package/${_hkgname}"
license=('BSD')
arch=('x86_64' 'arm64')
depends=('ghc-libs'
  'haskell-xml'
  'haskell-xml-conduit'
  'haskell-xml-types'
  'haskell-containers'
  'haskell-text'
  'haskell-glob'
  'haskell-juicypixels'
  'haskell-sha'
  'haskell-aeson'
  'haskell-aeson-pretty'
  'haskell-array'
  'haskell-attoparsec'
  'haskell-binary'
  'haskell-blaze-html'
  'haskell-blaze-markup'
  'haskell-bytestring'
  'haskell-case-insensitive'
  'haskell-citeproc'
  'haskell-commonmark'
  'haskell-commonmark-extensions'
  'haskell-commonmark-pandoc'
  'haskell-connection'
  'haskell-data-default'
  'haskell-deepseq'
  'haskell-directory'
  'haskell-doclayout'
  'haskell-doctemplates'
  'haskell-base64'
  'haskell-emojis'
  'haskell-exceptions'
  'haskell-file-embed'
  'haskell-filepath'
  'haskell-gridtables'
  'haskell-haddock-library'
  'haskell-http-client'
  'haskell-http-client-tls'
  'haskell-http-types'
  'haskell-ipynb'
  'haskell-jira-wiki-markup'
  'haskell-mime-types'
  'haskell-mtl'
  'haskell-network'
  'haskell-network-uri'
  'haskell-pandoc-types'
  'haskell-parsec'
  'haskell-pretty'
  'haskell-pretty-show'
  'haskell-process'
  'haskell-random'
  'haskell-safe'
  'haskell-scientific'
  'haskell-skylighting'
  'haskell-skylighting-core'
  'haskell-split'
  'haskell-syb'
  'haskell-tagsoup'
  'haskell-temporary'
  'haskell-texmath'
  'haskell-text-conversions'
  'haskell-time'
  'haskell-unicode-collation'
  'haskell-unicode-transforms'
  'haskell-yaml'
  'haskell-zip-archive'
  'haskell-zlib'
  'haskell-unix'
)
checkdepends=(
  'haskell-tasty'
  'haskell-tasty-hunit'
  'haskell-tasty-golden'
  'haskell-tasty-quickcheck'
)
makedepends=('ghc' 'uusi')
source=("https://hackage.haskell.org/packages/archive/$_hkgname/$pkgver/$_hkgname-$pkgver.tar.gz")
sha512sums=('4172f2101248983dc15753e1c6dafb34442996a1b14754626142491c56bae548bbe16b39ecbbd5ffe60c5fd44eb8227ff595bbf519558de98c548e9315e3dbc2')

license_name="COPYING.md"

prepare() {
  cd $_hkgname-$pkgver
  gen-setup
}

# template start; name=haskell-default; version=1.0;
# default haskell build steps

build() {
# template start; name=haskell-build; version=1.0;
  cd $_hkgname-$pkgver

  local _opts
  if (( CHECKFUNC )) && [ -z ${_notests+x} ]; then
    _opts=('--enable-tests')
  else
    _opts=('--disable-tests')
  fi

  runhaskell Setup configure -O --disable-static --enable-shared --enable-executable-dynamic \
    --prefix=${pacman_root}/usr \
    --docdir=${pacman_root}/usr/share/doc/$pkgname \
    --datasubdir=$pkgname \
    --dynlibdir='$libdir' \
    -ftemplateHaskell --ghc-option=-fllvm --ghc-option=-fhide-source-paths \
    --flags="${_build_flags:-}" \
    "${_opts[@]}"

  runhaskell Setup build $MAKEFLAGS

  if [ -z ${_no_register+x} ]; then
    runhaskell Setup register --gen-script
    runhaskell Setup unregister --gen-script

    sed -i -r -e "s|ghc-pkg.*update[^ ]* |&'--force' |" register.sh
    sed -i -r -e "s|ghc-pkg.*unregister[^ ]* |&'--force' |" unregister.sh
  fi
# template end;
}

check() {
# template start; name=haskell-check; version=1.0;
  cd $_hkgname-$pkgver
  if [ -z ${_notests+x} ]; then
    if [ -z ${_tests_can_fail+x} ]; then
      runhaskell Setup test --show-details=direct
    else
      runhaskell Setup test --show-details=direct || echo "tests failed!"
    fi
  fi
# template end;
}

package() {
# template start; name=haskell-package; version=1.0;
  cd $_hkgname-$pkgver

  if [ -z ${_no_register+x} ]; then
    install -D -m744 register.sh "$pkgdir/${pacman_root}/usr/share/haskell/register/$pkgname.sh"
    install -D -m744 unregister.sh "$pkgdir/${pacman_root}/usr/share/haskell/unregister/${pkgname}.sh"
  fi

  local _license_name=${license_name-LICENSE}

  runhaskell Setup copy --destdir="$pkgdir"

  if [ -z ${_no_license+x} ]; then
    install -D -m644 "${_license_name}" "$pkgdir/${pacman_root}/usr/share/licenses/$pkgname/LICENSE"
    rm "$pkgdir"/${pacman_root}/usr/share/doc/$pkgname/${_license_name}
  fi

  local dl; for dl in ${pkgdir}/${pacman_root}/usr/lib/*.dylib ${pkgdir}/${pacman_root}/usr/bin/* ; do
    [ ! -e "${dl}" ] || fix_rpath "${dl}"
  done
# template end;
}
# template end;

# vim: ts=2 sw=2 et:
