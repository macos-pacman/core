# Maintainer: zhiayang <zhiayang@nowhere>

_hkgname=hedgehog
pkgname=haskell-${_hkgname}
pkgver=1.2
pkgrel=2
pkgdesc="Release with confidence"
url="https://hackage.haskell.org/package/${_hkgname}"
license=('BSD')
arch=('x86_64' 'arm64')
depends=('ghc-libs'
  'haskell-ansi-terminal'
  'haskell-async'
  'haskell-barbies'
  'haskell-bytestring'
  'haskell-concurrent-output'
  'haskell-containers'
  'haskell-deepseq'
  'haskell-directory'
  'haskell-erf'
  'haskell-exceptions'
  'haskell-lifted-async'
  'haskell-mmorph'
  'haskell-mtl'
  'haskell-pretty-show'
  'haskell-primitive'
  'haskell-random'
  'haskell-resourcet'
  'haskell-stm'
  'haskell-template-haskell'
  'haskell-text'
  'haskell-time'
  'haskell-transformers'
  'haskell-transformers-base'
  'haskell-wl-pprint-annotated'
)
checkdepends=()
makedepends=('ghc' 'uusi')
source=("https://hackage.haskell.org/packages/archive/$_hkgname/$pkgver/$_hkgname-$pkgver.tar.gz")
sha512sums=('379ec7dd52b70bc8911d15a1f75317baaf3bf9d00f9d4a84490df8a83c885352600ff5f86499d2fac263fb3e01b3d0e1ffe34f9460934ed6f081ccfaa74d4429')

prepare() {
  cd $_hkgname-$pkgver
  gen-setup

  uusi -u 'ansi-terminal' -u 'primitive' -u 'resourcet' -u 'template-haskell' ${_hkgname}.cabal
}

# template start; name=haskell-default; version=1.0;
# default haskell build steps

build() {
# template start; name=haskell-build; version=1.0;
  cd $_hkgname-$pkgver

  local _opts
  if (( CHECKFUNC )) && [ -z ${_notests+x} ]; then
    _opts=('--enable-tests')
  else
    _opts=('--disable-tests')
  fi

  runhaskell Setup configure -O --disable-static --enable-shared --enable-executable-dynamic \
    --prefix=${pacman_root}/usr \
    --docdir=${pacman_root}/usr/share/doc/$pkgname \
    --datasubdir=$pkgname \
    --dynlibdir='$libdir' \
    -ftemplateHaskell --ghc-option=-fllvm --ghc-option=-fhide-source-paths \
    --flags="${_build_flags:-}" \
    "${_opts[@]}"

  runhaskell Setup build $MAKEFLAGS

  if [ -z ${_no_register+x} ]; then
    runhaskell Setup register --gen-script
    runhaskell Setup unregister --gen-script

    sed -i -r -e "s|ghc-pkg.*update[^ ]* |&'--force' |" register.sh
    sed -i -r -e "s|ghc-pkg.*unregister[^ ]* |&'--force' |" unregister.sh
  fi
# template end;
}

check() {
# template start; name=haskell-check; version=1.0;
  cd $_hkgname-$pkgver
  if [ -z ${_notests+x} ]; then
    if [ -z ${_tests_can_fail+x} ]; then
      runhaskell Setup test --show-details=direct
    else
      runhaskell Setup test --show-details=direct || echo "tests failed!"
    fi
  fi
# template end;
}

package() {
# template start; name=haskell-package; version=1.0;
  cd $_hkgname-$pkgver

  if [ -z ${_no_register+x} ]; then
    install -D -m744 register.sh "$pkgdir/${pacman_root}/usr/share/haskell/register/$pkgname.sh"
    install -D -m744 unregister.sh "$pkgdir/${pacman_root}/usr/share/haskell/unregister/${pkgname}.sh"
  fi

  local _license_name=${license_name-LICENSE}

  runhaskell Setup copy --destdir="$pkgdir"

  if [ -z ${_no_license+x} ]; then
    install -D -m644 "${_license_name}" "$pkgdir/${pacman_root}/usr/share/licenses/$pkgname/LICENSE"
    rm "$pkgdir"/${pacman_root}/usr/share/doc/$pkgname/${_license_name}
  fi

  local dl; for dl in ${pkgdir}/${pacman_root}/usr/lib/*.dylib ${pkgdir}/${pacman_root}/usr/bin/* ; do
    [ ! -e "${dl}" ] || fix_rpath "${dl}"
  done
# template end;
}
# template end;

# vim: ts=2 sw=2 et:
