# Maintainer: Johannes Löthberg <johannes@kyriasis.com>
# Maintainer: Jan Alexander Steffens (heftig) <heftig@archlinux.org>
# Contributor: Alexander F Rødseth <xyproto@archlinux.org>
# Contributor: Daniel Micay <danielmicay@gmail.com>
# Contributor: userwithuid <userwithuid@gmail.com>

# note: we just let the rust bootstrap script download the compiler;
# it seems like whatever we install with rustup manually can't compile shit
# it also lets us not have rust depend on rust, which is kinda dumb.


pkgname=rust
pkgver=1.69.0
pkgrel=1
pkgdesc="Systems programming language focused on safety, speed and concurrency"
url=https://www.rust-lang.org/
arch=('x86_64' 'arm64')
license=(MIT Apache)
options=(
  !debug
  !emptydirs
  !lto
  !strip
)
depends=(
  curl
  gcc-libs
  libssh2
  llvm-libs
)
makedepends=(
  cmake
  libffi
  lld
  llvm
  ninja
  perl
  python
)
source=(
  "https://static.rust-lang.org/dist/rustc-$pkgver-src.tar.gz"{,.asc}
  0001-cargo-Change-libexec-dir.patch
  0001-bootstrap-Change-libexec-dir.patch
  0002-compiler-Change-LLVM-targets.patch
  0003-compiler-Use-wasm-ld-for-wasm-targets.patch
  disable-time-machine-fuckery.patch
)
b2sums=('1440ad3e7e52d1e31752c8a44f9e626b9c2b0388f7285ddbdf1d0f7802724e707daffe19c6ba4aec62c3dba0e60ec2426ebecf69268b1e20a0c89860964a64f3'
        'SKIP'
        'd1a029499dd221b24124b193f7d42e9cb766d4bb9c4faa61a4b60007550693c98f1d1ab6793dd16b9f5a229bc70f805d6cd5eca6e744b34c0fd2413701bc58b6'
        '9752dc3b5fc2248c8bec4efbb3d927088d48d9416229d545a05180374549a0dda6e9d6d9a8d0a3b03437f2e3c54f9c153aab3281d46411f4c81559033b8fb04a'
        '66c5cf262c4b865cdcc238d88aad4aa46e0861de0b4e20b5e86f7f1c312f7a40df0f9477fbc494949a99f51e9eb93537c072270e9bd20dfa79eb5cbe0d850e0f'
        '9f3f911088a22101f8966dc16a1ecc65da5facaad5c169d9464e721aa452dd45968d359a5b35ae74ff23bd98d44c60cb04c0b8bc89e10fb99549c1670371c902'
        '6ea472d7d8afd0688dac305decb818b3779277b87058cb8f9207adc01881e7b51474f8c52fc4c21247060ede2614a54183446b0290987db02bb83a0233149b06')
validpgpkeys=(108F66205EAEB0AAA8DD5E1C85AB96E6FA1BE5FE  # Rust Language (Tag and Release Signing Key) <rust-key@rust-lang.org>
              474E22316ABF4785A88C6E8EA2C794A986419D8A) # Tom Stellard <tstellar@redhat.com>

_arch1=$(clang -print-target-triple)
_arch2=${_arch1%%.*}
_arch=$(echo ${_arch2} | grep -o '.*[^0-9]' | sed -e 's/arm64/aarch64/')

prepare() {
  cd rustc-$pkgver-src

  # Patch bootstrap and cargo so credential helpers
  # are in /usr/lib instead of /usr/libexec
  patch -d src/tools/cargo -Np1 < ../0001-cargo-Change-libexec-dir.patch

  patch -Np1 -i ../0001-bootstrap-Change-libexec-dir.patch

  # Use our *-pc-linux-gnu targets, making LTO with clang simpler
  patch -Np1 -i ../0002-compiler-Change-LLVM-targets.patch

  # Use our wasm-ld
  patch -Np1 -i ../0003-compiler-Use-wasm-ld-for-wasm-targets.patch

  # disable time machine fuckery
  patch -Np1 -i ../disable-time-machine-fuckery.patch

  cat >config.toml <<END
changelog-seen = 2
profile = "user"

[llvm]
link-shared = true

[build]
host = ["${_arch}"]
target = ["${_arch}"]
locked-deps = true
vendor = true
tools = [
  "cargo",
  "rls",
  "clippy",
  "rustfmt",
  "rustdoc",
  "analysis",
  "src",
  "rust-demangler",
]
sanitizers = true
profiler = true

# Generating docs fails with the wasm32-* targets
docs = false

[install]
prefix = "${pacman_root}/usr"
sysconfdir = "${pacman_root}/etc"

[rust]
# debuginfo-level-std = 2
channel = "stable"
description = "(macos-pacman) $pkgname $pkgver-$pkgrel"

# note: we'll fix the rpath after-the-fact
rpath = true
backtrace-on-ice = true
remap-debuginfo = true
jemalloc = true

# LLVM crashes when passing an object through ThinLTO twice.  This is triggered
# when using rust code in cross-language LTO if libstd was built using ThinLTO.
# http://blog.llvm.org/2019/09/closing-gap-cross-language-lto-between.html
# https://github.com/rust-lang/rust/issues/54872
codegen-units-std = 1

# musl target produces warnings
deny-warnings = false

[dist]
compression-formats = ["gz"]

[target.${_arch}]
cc = "${pacman_root}/usr/bin/clang"
cxx = "${pacman_root}/usr/bin/clang++"
ar = "/usr/bin/ar"
ranlib = "/usr/bin/ranlib"
llvm-config = "${pacman_root}/usr/bin/llvm-config"

END
}

_pick() {
  local p="$1" f d; shift
  for f; do
    d="$srcdir/$p/$f"
    mkdir -p "$(dirname "$d")"
    mv "$f" "$d"
    rmdir -p --ignore-fail-on-non-empty "$(dirname "$f")"
  done
}

build() {
  cd rustc-$pkgver-src

  export RUST_BACKTRACE=1

  rm -fr "$srcdir/dest-rust"
  DESTDIR="$srcdir/dest-rust" python ./x.py install -j"$(getconf _NPROCESSORS_ONLN)"

  cd ../dest-rust

  local _root
  _root=${pacman_root#/}

  # delete unnecessary files, e.g. files only used for the uninstall script
  rm ${_root}/usr/lib/rustlib/{components,install.log,rust-installer-version,uninstall.sh}
  rm ${_root}/usr/lib/rustlib/manifest-*

  mkdir -p ${_root}/usr/share/bash-completion
  mv ${_root}/etc/bash_completion.d ${_root}/usr/share/bash-completion/completions
}

package() {
  optdepends=(
    'gdb: rust-gdb script'
    'lldb: rust-lldb script'
  )
  provides=(
    cargo
    rustfmt
  )
  conflicts=(
    cargo
    'rust-docs<1:1.56.1-3'
    rustfmt
  )
  replaces=(
    cargo
    cargo-tree
    'rust-docs<1:1.56.1-3'
    rustfmt
  )

  cp -a dest-rust/* "$pkgdir"

  local _root
  _root=${pacman_root#/}

  pushd $pkgdir > /dev/null
    # rustbuild always installs copies of the shared libraries to /usr/lib,
    # overwrite them with symlinks to the per-architecture versions
    ln -sf ${pacman_root}/usr/lib/rustlib/${_arch}/lib/*.dylib ${_root}/usr/lib
  popd > /dev/null

  # fix those rpaths
  msg 'Fixing dylib names'
  local _lib _libs
  IFS=$'\n' read -r -d '' -a _libs < <(find ${pkgdir}/${pacman_root}/usr/lib -iname '*.dylib') || true

  for _lib in "${_libs[@]}"; do
    fix_rpath "${pacman_root}" "${pkgdir}" "${_lib}"
  done

  local _exe _exes
  IFS=$'\n' read -r -d '' -a _exes < <(find ${pkgdir}/${pacman_root}/usr/bin -type f) || true

  for _exe in "${_exes[@]}"; do
    fix_rpath "${pacman_root}" "${pkgdir}" "${_exe}"
  done

  msg 'Codesigning modified dylibs'

  _libs=("${pkgdir}/${pacman_root}/usr/lib/rustlib/${_arch}/lib/librustc-stable_rt."{tsan,asan,lsan}.dylib)
  for _lib in "${_libs[@]}"; do
      codesign --force -s - "${_lib}"
  done
}

# vim:set ts=2 sw=2 et:
