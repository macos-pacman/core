# Maintainer: Johannes Löthberg <johannes@kyriasis.com>
# Maintainer: Jan Alexander Steffens (heftig) <heftig@archlinux.org>
# Contributor: Alexander F Rødseth <xyproto@archlinux.org>
# Contributor: Daniel Micay <danielmicay@gmail.com>
# Contributor: userwithuid <userwithuid@gmail.com>

# note: we just let the rust bootstrap script download the compiler;
# it seems like whatever we install with rustup manually can't compile shit
# it also lets us not have rust depend on rust, which is kinda dumb.


pkgbase=rust
pkgname=(rust rust-wasm rust-src)
pkgver=1.84.1
pkgrel=1
pkgdesc="Systems programming language focused on safety, speed and concurrency"
url=https://www.rust-lang.org/
arch=('x86_64' 'arm64')
license=(MIT Apache)
options=(
  !debug
  !emptydirs
  !lto
  !strip
)
depends=(
  curl
  gcc-libs
  libssh2
  libgit2
  llvm-libs
  openssl
)
makedepends=(
  cmake
  libffi
  lld
  llvm
  ninja
  perl
  python
  pkg-config
  wasi-libc
  llvm-project-toolchain
)
source=(
  "https://static.rust-lang.org/dist/rustc-$pkgver-src.tar.gz"{,.asc}
  0001-bootstrap-Change-libexec-dir.patch
  0002-bootstrap-Change-bash-completion-dir.patch
  0004-compiler-Use-wasm-ld-for-wasm-targets.patch
  disable-time-machine-fuckery.patch
)
b2sums=('c0952f44632813e6ddfd36754bbbc498511cd80a1dd613f41f027b363fbd97bdf825013262438fac56bbc88c53ec557103119b4d60e7be5cd58b3ec51f1fc2c2'
        'SKIP'
        'd3ed7043e288c78ac4007b267448457db0972905037754b67249d81be0889f47c4d93573c24d730907c31ec44e80ce696fbf50f98521eadee92c003d2324a1a3'
        '6afaf5bff729618aa35d84f20b1447694c887b84a406f55344864b9e8dce72f80467412c128b5309d5b962b605ca396b77a52f275dd35681ab50cbedc68f873a'
        '23f399d5ea776df5dba1ec42a96020a7ae3b18f5a83121d90ca0256a90027529135bac751373a31480860c0dbad30598833a7da43d1e7f25ce5b6d5d945ce550'
        '6ea472d7d8afd0688dac305decb818b3779277b87058cb8f9207adc01881e7b51474f8c52fc4c21247060ede2614a54183446b0290987db02bb83a0233149b06')
validpgpkeys=(
  108F66205EAEB0AAA8DD5E1C85AB96E6FA1BE5FE  # Rust Language (Tag and Release Signing Key) <rust-key@rust-lang.org>
)

_arch1=$(clang -print-target-triple)
_arch2=${_arch1%%.*}
_arch=$(echo ${_arch2} | grep -o '.*[^0-9]' | sed -e 's/arm64/aarch64/')

prepare() {
  cd rustc-$pkgver-src

  patch -Np1 -i ../0001-bootstrap-Change-libexec-dir.patch

  # Put bash completions where they belong
  patch -Np1 -i ../0002-bootstrap-Change-bash-completion-dir.patch

  # Use our wasm-ld
  patch -Np1 -i ../0004-compiler-Use-wasm-ld-for-wasm-targets.patch

  # disable time machine fuckery
  patch -Np1 -i ../disable-time-machine-fuckery.patch

  cat >config.toml <<END
change-id = 131075
profile = "user"

[llvm]
link-shared = true
download-ci-llvm = false

[build]
host = ["${_arch}"]
target = [
  "${_arch}",
  "wasm32-unknown-unknown",
  "wasm32-wasip1",
  "wasm32-wasip1-threads",
  "wasm32-wasip2",
]
locked-deps = true
vendor = true
tools = [
  "cargo",
  "clippy",
  "rustfmt",
  "rustdoc",
  "analysis",
  "src",
  "rust-demangler",
  "rust-analyzer-proc-macro-srv",
]
sanitizers = true
profiler = true

# Generating docs fails with the wasm32-* targets
docs = false

[install]
prefix = "${pacman_root}/usr"
sysconfdir = "${pacman_root}/etc"

[rust]
# debuginfo-level-std = 2
channel = "stable"
description = "(macos-pacman) $pkgname $pkgver-$pkgrel"

# note: we'll fix the rpath after-the-fact
rpath = true
backtrace-on-ice = true
remap-debuginfo = true
jemalloc = true

# LLVM crashes when passing an object through ThinLTO twice.  This is triggered
# when using rust code in cross-language LTO if libstd was built using ThinLTO.
# http://blog.llvm.org/2019/09/closing-gap-cross-language-lto-between.html
# https://github.com/rust-lang/rust/issues/54872
codegen-units-std = 1

# musl target produces warnings
deny-warnings = false

lld = false
use-lld = "external"
llvm-bitcode-linker = false

[dist]
compression-formats = ["gz"]

[target.${_arch}]
cc = "${pacman_root}/usr/bin/clang"
cxx = "${pacman_root}/usr/bin/clang++"
ar = "${pacman_root}/usr/bin/llvm-ar"
ranlib = "${pacman_root}/usr/bin/llvm-ranlib"
llvm-config = "${pacman_root}/usr/bin/llvm-config"


[target.wasm32-unknown-unknown]
cc = "${pacman_root}/usr/bin/clang"
cxx = "${pacman_root}/usr/bin/clang++"
ar = "${pacman_root}/usr/bin/llvm-ar"
ranlib = "${pacman_root}/usr/bin/llvm-ranlib"
linker = "${pacman_root}/usr/bin/wasm-ld"
llvm-config = "${pacman_root}/usr/bin/llvm-config"
default-linker = "wasm-ld"
sanitizers = false
profiler = false

[target.wasm32-wasip1]
wasi-root = "${pacman_root}/usr/share/wasi-sysroot"
cc = "${pacman_root}/usr/bin/clang"
cxx = "${pacman_root}/usr/bin/clang++"
ar = "${pacman_root}/usr/bin/llvm-ar"
ranlib = "${pacman_root}/usr/bin/llvm-ranlib"
linker = "${pacman_root}/usr/bin/wasm-ld"
llvm-config = "${pacman_root}/usr/bin/llvm-config"
default-linker = "wasm-ld"
sanitizers = false
profiler = false

[target.wasm32-wasip1-threads]
wasi-root = "${pacman_root}/usr/share/wasi-sysroot"
cc = "${pacman_root}/usr/bin/clang"
cxx = "${pacman_root}/usr/bin/clang++"
ar = "${pacman_root}/usr/bin/llvm-ar"
ranlib = "${pacman_root}/usr/bin/llvm-ranlib"
linker = "${pacman_root}/usr/bin/wasm-ld"
llvm-config = "${pacman_root}/usr/bin/llvm-config"
default-linker = "wasm-ld"
sanitizers = false
profiler = false

[target.wasm32-wasip2]
wasi-root = "${pacman_root}/usr/share/wasi-sysroot"
cc = "${pacman_root}/usr/bin/clang"
cxx = "${pacman_root}/usr/bin/clang++"
ar = "${pacman_root}/usr/bin/llvm-ar"
ranlib = "${pacman_root}/usr/bin/llvm-ranlib"
linker = "${pacman_root}/usr/bin/wasm-ld"
llvm-config = "${pacman_root}/usr/bin/llvm-config"
default-linker = "wasm-ld"
sanitizers = false
profiler = false

END
}

_pick() {
  local p="$1" f d; shift
  for f; do
    d="$srcdir/$p/$f"
    mkdir -p "$(dirname "$d")"
    mv -f "$f" "$d"
    rmdir -p "$(dirname "$f")" || :
  done
}

build() {
  cd rustc-$pkgver-src

  export CFLAGS="${CFLAGS/-march=native/}"
  export CXXFLAGS="${CXXFLAGS/-march=native/}"

  export RUST_BACKTRACE=1

  rm -fr "$srcdir/dest-rust"
  DESTDIR="$srcdir/dest-rust" python ./x.py install -j"$(getconf _NPROCESSORS_ONLN)"

  cd ../dest-rust

  local _root
  _root=${pacman_root#/}

  # delete unnecessary files, e.g. files only used for the uninstall script
  rm -f ${_root}/usr/bin/*.old
  rm -f ${_root}/usr/lib/rustlib/{components,install.log,rust-installer-version,uninstall.sh}
  rm -f ${_root}/usr/lib/rustlib/manifest-*

  local ldir="${_root}/usr/share/licenses/rust"
  local f d

  mkdir -p ${ldir}
  for f in ${_root}/usr/share/doc/*/{COPYRIGHT,LICENSE}*; do
    d="$(dirname "$f")"
    case $f in
      */LICENSE-APACHE) rm -v "$f" ;;
      *) mv -v "$f" "$ldir/${f##*/}.${d##*/}" ;;
    esac
    rmdir -p "$d" || :
  done

  _pick dest-wasm ${_root}/usr/lib/rustlib/wasm32-*
  _pick dest-src  ${_root}/usr/lib/rustlib/src
}

package_rust() {
  optdepends=(
    'gdb: rust-gdb script'
    'lldb: rust-lldb script'
  )
  provides=(
    cargo
    rustfmt
  )
  conflicts=(
    cargo
    rustfmt
  )
  replaces=(
    cargo
    cargo-tree
    rustfmt
  )

  cp -a dest-rust/* "$pkgdir"

  local _root
  _root=${pacman_root#/}

  pushd $pkgdir > /dev/null
    # rustbuild always installs copies of the shared libraries to /usr/lib,
    # overwrite them with symlinks to the per-architecture versions
    ln -sf ${pacman_root}/usr/lib/rustlib/${_arch}/lib/*.dylib ${_root}/usr/lib
  popd > /dev/null

  # fix those rpaths
  msg 'Fixing dylib names'
  local _lib _libs
  IFS=$'\n' read -r -d '' -a _libs < <(find ${pkgdir}/${pacman_root}/usr/lib -iname '*.dylib' \
    -o -iname "rust-analyzer-proc-macro-srv") || true

  for _lib in "${_libs[@]}"; do
    fix_rpath_v2 "${_lib}"
  done

  local _exe _exes
  IFS=$'\n' read -r -d '' -a _exes < <(find ${pkgdir}/${pacman_root}/usr/bin -type f) || true

  for _exe in "${_exes[@]}"; do
    fix_rpath_v2 "${_exe}"
  done

  msg 'Codesigning modified dylibs'

  _libs=("${pkgdir}/${pacman_root}/usr/lib/rustlib/${_arch}/lib/librustc-stable_rt."{tsan,asan,lsan}.dylib)
  for _lib in "${_libs[@]}"; do
      codesign --force -s - "${_lib}"
  done
}

package_rust-src() {
  pkgdesc="Source code for the Rust standard library"
  depends=(rust)

  cp -a dest-src/* "$pkgdir"

  mkdir -p "$pkgdir/${pacman_root}/usr/share/licenses"
  ln -s rust "$pkgdir/${pacman_root}/usr/share/licenses/$pkgname"
}

package_rust-wasm() {
  pkgdesc="WebAssembly targets for Rust"
  depends=(
    lld
    rust
  )

  cp -a dest-wasm/* "$pkgdir"

  mkdir -p "$pkgdir/${pacman_root}/usr/share/licenses"
  ln -s rust "$pkgdir/${pacman_root}/usr/share/licenses/$pkgname"

}

# vim:set ts=2 sw=2 et:
