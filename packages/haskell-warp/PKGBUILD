# Maintainer: zhiayang <zhiayang@nowhere>

_hkgname=warp
pkgname=haskell-${_hkgname}
pkgver=3.3.25
pkgrel=1
pkgdesc="A fast, light-weight web server for WAI applications"
url="https://hackage.haskell.org/package/${_hkgname}"
license=('BSD')
arch=('x86_64' 'arm64')
depends=('ghc-libs'
  'haskell-array'
  'haskell-auto-update'
  'haskell-bsb-http-chunked'
  'haskell-bytestring'
  'haskell-case-insensitive'
  'haskell-containers'
  'haskell-ghc-prim'
  'haskell-hashable'
  'haskell-http-date'
  'haskell-http-types'
  'haskell-http2'
  'haskell-iproute'
  'haskell-recv'
  'haskell-simple-sendfile'
  'haskell-stm'
  'haskell-streaming-commons'
  'haskell-text'
  'haskell-time-manager'
  'haskell-unix-compat'
  'haskell-vault'
  'haskell-wai'
  'haskell-word8'
  'haskell-unliftio'
  'haskell-x509'
  'haskell-network'
  'haskell-unix'
)
checkdepends=(
  'haskell-doctest'
  'haskell-process'
  'haskell-hspec'
  'haskell-quickcheck'
)
makedepends=('ghc')
source=("https://hackage.haskell.org/packages/archive/$_hkgname/$pkgver/$_hkgname-$pkgver.tar.gz")
sha512sums=('83d3d268522efd8ca8e99b0960626cdbeb193e95382ed2271fd3c73196d0ca42f30ee5945b2bf913a2410c656e2963a59e907109def0552d897473c75dacb3e1')

_build_flags="+x509"

prepare() {
  cd $_hkgname-$pkgver
}

# template start; name=haskell-default; version=1.0;
# default haskell build steps

build() {
# template start; name=haskell-build; version=1.0;
  cd $_hkgname-$pkgver

  local _opts
  if (( CHECKFUNC )) && [ -z ${_notests+x} ]; then
    _opts=('--enable-tests')
  else
    _opts=('--disable-tests')
  fi

  runhaskell Setup configure -O --disable-static --enable-shared --enable-executable-dynamic \
    --prefix=${pacman_root}/usr \
    --docdir=${pacman_root}/usr/share/doc/$pkgname \
    --datasubdir=$pkgname \
    --dynlibdir='$libdir' \
    -ftemplateHaskell --ghc-option=-fllvm --ghc-option=-fhide-source-paths \
    --flags="${_build_flags:-}" \
    "${_opts[@]}"

  runhaskell Setup build $MAKEFLAGS

  if [ -z ${_no_register+x} ]; then
    runhaskell Setup register --gen-script
    runhaskell Setup unregister --gen-script

    sed -i -r -e "s|ghc-pkg.*update[^ ]* |&'--force' |" register.sh
    sed -i -r -e "s|ghc-pkg.*unregister[^ ]* |&'--force' |" unregister.sh
  fi
# template end;
}

check() {
# template start; name=haskell-check; version=1.0;
  cd $_hkgname-$pkgver
  if [ -z ${_notests+x} ]; then
    if [ -z ${_tests_can_fail+x} ]; then
      runhaskell Setup test --show-details=direct
    else
      runhaskell Setup test --show-details=direct || echo "tests failed!"
    fi
  fi
# template end;
}

package() {
# template start; name=haskell-package; version=1.0;
  cd $_hkgname-$pkgver

  if [ -z ${_no_register+x} ]; then
    install -D -m744 register.sh "$pkgdir/${pacman_root}/usr/share/haskell/register/$pkgname.sh"
    install -D -m744 unregister.sh "$pkgdir/${pacman_root}/usr/share/haskell/unregister/${pkgname}.sh"
  fi

  local _license_name=${license_name-LICENSE}

  runhaskell Setup copy --destdir="$pkgdir"

  if [ -z ${_no_license+x} ]; then
    install -D -m644 "${_license_name}" "$pkgdir/${pacman_root}/usr/share/licenses/$pkgname/LICENSE"
    rm "$pkgdir"/${pacman_root}/usr/share/doc/$pkgname/${_license_name}
  fi

  local dl; for dl in ${pkgdir}/${pacman_root}/usr/lib/*.dylib ${pkgdir}/${pacman_root}/usr/bin/* ; do
    [ ! -e "${dl}" ] || fix_rpath "${dl}"
  done
# template end;
}
# template end;

# vim: ts=2 sw=2 et:
