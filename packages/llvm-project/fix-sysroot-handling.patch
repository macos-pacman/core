diff --git a/clang-tools-extra/clangd/CompileCommands.cpp b/clang-tools-extra/clangd/CompileCommands.cpp
index bcd39b2d3..dd7518ae9 100644
--- a/clang-tools-extra/clangd/CompileCommands.cpp	2024-09-17 19:26:36.000000000 +0800
+++ b/clang-tools-extra/clangd/CompileCommands.cpp	2024-11-23 16:33:44.738951395 +0800
@@ -39,6 +39,7 @@
 
 // Query apple's `xcrun` launcher, which is the source of truth for "how should"
 // clang be invoked on this system.
+// ^ THIS IS NOT TRUE YOU GOD DAMNED CLOWNS
 std::optional<std::string> queryXcrun(llvm::ArrayRef<llvm::StringRef> Argv) {
   auto Xcrun = llvm::sys::findProgramByName("xcrun");
   if (!Xcrun) {
@@ -96,24 +97,39 @@
   // so if /usr/bin/clang is a symlink, it sees the resolved path.
   // clangd doesn't have that luxury, so we resolve symlinks ourselves.
 
-  // On Mac, `which clang` is /usr/bin/clang. It runs `xcrun clang`, which knows
-  // where the real clang is kept. We need to do the same thing,
-  // because cc1 (not the driver!) will find libc++ relative to argv[0].
-#ifdef __APPLE__
-  if (auto MacClang = queryXcrun({"xcrun", "--find", "clang"}))
-    return resolve(std::move(*MacClang));
-#endif
-  // On other platforms, just look for compilers on the PATH.
+  // previously, clangd would always preferentially use xcrun to find clang,
+  // which is a monumentally fucking stupid idea.
+
+  // a much better approach: FIRST, try compilers on path:
   for (const char *Name : {"clang", "gcc", "cc"})
     if (auto PathCC = llvm::sys::findProgramByName(Name))
       return resolve(std::move(*PathCC));
-  // Fallback: a nonexistent 'clang' binary next to clangd.
+
+  // THEN, if nothing in the path exists, we try using a 'clang' binary next
+  // to clangd. idk which clown decided that it would never exist, but it
+  // definitely should.
   static int StaticForMainAddr;
   std::string ClangdExecutable =
       llvm::sys::fs::getMainExecutable("clangd", (void *)&StaticForMainAddr);
   SmallString<128> ClangPath;
   ClangPath = llvm::sys::path::parent_path(ClangdExecutable);
   llvm::sys::path::append(ClangPath, "clang");
+
+  // if this exists, then we return it.
+  if (llvm::sys::fs::exists(ClangPath))
+    return std::string(ClangPath.str());
+
+  // On Mac, `which clang` is /usr/bin/clang. It runs `xcrun clang`, which knows
+  // where the real clang is kept. We need to do the same thing,
+  // because cc1 (not the driver!) will find libc++ relative to argv[0].
+#ifdef __APPLE__
+  if (auto MacClang = queryXcrun({"xcrun", "--find", "clang"}))
+    return resolve(std::move(*MacClang));
+#endif
+
+  // if a `clang` next to `clangd` did not exist, and either:
+  // we are not __APPLE__, *or* xcrun did not find clang, then
+  // just return the nonexistent path anyway
   return std::string(ClangPath);
 }
 
@@ -127,6 +143,9 @@
   // SDKROOT overridden in environment, respect it. Driver will set isysroot.
   if (::getenv("SDKROOT"))
     return std::nullopt;
+  else if (auto sdk_path = CompilerInvocation::GetMacOSXDefaultSDKPath(); strlen(sdk_path) > 0)
+    return sdk_path;
+
   return queryXcrun({"xcrun", "--show-sdk-path"});
 }
 
diff --git a/clang/CMakeLists.txt b/clang/CMakeLists.txt
index 090cfa352..1ac809a13 100644
--- a/clang/CMakeLists.txt
+++ b/clang/CMakeLists.txt
@@ -208,3 +208,6 @@ set(GCC_INSTALL_PREFIX "" CACHE PATH "Directory where gcc is installed." )
 set(DEFAULT_SYSROOT "" CACHE STRING
   "Default <path> to all compiler invocations for --sysroot=<path>." )
+set(DEFAULT_OSX_SDK_PATH "" CACHE STRING
+  "Default SDK path for macOS")
+
 if(GCC_INSTALL_PREFIX AND NOT USE_DEPRECATED_GCC_INSTALL_PREFIX)
diff --git a/clang/include/clang/Config/config.h.cmake b/clang/include/clang/Config/config.h.cmake
index a54a26cd3..4cd6a32c8 100644
--- a/clang/include/clang/Config/config.h.cmake
+++ b/clang/include/clang/Config/config.h.cmake
@@ -48,6 +48,9 @@
 /* Default <path> to all compiler invocations for --sysroot=<path>. */
 #define DEFAULT_SYSROOT "${DEFAULT_SYSROOT}"
 
+/* Default SDK path when on macOS */
+#define DEFAULT_OSX_SDK_PATH "${DEFAULT_OSX_SDK_PATH}"
+
 /* Directory where gcc is installed. */
 #define GCC_INSTALL_PREFIX "${GCC_INSTALL_PREFIX}"
 
diff --git a/clang/include/clang/Driver/ToolChain.h b/clang/include/clang/Driver/ToolChain.h
index f75f35dc9..59af109d4 100644
--- a/clang/include/clang/Driver/ToolChain.h
+++ b/clang/include/clang/Driver/ToolChain.h
@@ -801,6 +801,9 @@ public:
     return llvm::DenormalMode::getIEEE();
   }
 
+  /// Returns the default SDK path (set at configure time) for Darwin toolchains
+  virtual std::optional<std::string> maybeGetMacOSXDefaultSDKPath() const { return std::nullopt; }
+
   // We want to expand the shortened versions of the triples passed in to
   // the values used for the bitcode libraries.
   static llvm::Triple getOpenMPTriple(StringRef TripleStr) {
diff --git a/clang/include/clang/Frontend/CompilerInvocation.h b/clang/include/clang/Frontend/CompilerInvocation.h
index 254f048ed..c0d73246a 100644
--- a/clang/include/clang/Frontend/CompilerInvocation.h
+++ b/clang/include/clang/Frontend/CompilerInvocation.h
@@ -305,6 +305,10 @@ public:
   /// executable), for finding the builtin compiler path.
   static std::string GetResourcesPath(const char *Argv0, void *MainAddr);
 
+  /// Get the path to the configured MacOSX.sdk (eg. /Library/Developer/CommandLineTools/MacOSX13.3.sdk)
+  /// if it exists, and we're on an Apple platform. Otherwise, return an empty string.
+  static const char* GetMacOSXDefaultSDKPath();
+
   /// Populate \p Opts with the default set of pointer authentication-related
   /// options given \p LangOpts and \p Triple.
   ///
diff --git a/clang/lib/Driver/ToolChains/Clang.cpp b/clang/lib/Driver/ToolChains/Clang.cpp
index 77554aa2c..86c88896c 100644
--- a/clang/lib/Driver/ToolChains/Clang.cpp
+++ b/clang/lib/Driver/ToolChains/Clang.cpp
@@ -1217,6 +1217,14 @@ void Clang::AddPreprocessingOptions(Compilation &C, const JobAction &JA,
       CmdArgs.push_back("-isysroot");
       CmdArgs.push_back(C.getArgs().MakeArgString(sysroot));
     }
+  // check whether the toolchain has a default osx sdk for us
+  } else if (!C.getDriver().ExplicitSysRootGiven) {
+    if (auto maybe_macos_sdk = getToolChain().maybeGetMacOSXDefaultSDKPath(); maybe_macos_sdk.has_value()) {
+      if (!Args.hasArg(options::OPT_isysroot)) {
+        CmdArgs.push_back("-isysroot");
+        CmdArgs.push_back(C.getArgs().MakeArgString(*maybe_macos_sdk));
+      }
+    }
   }
 
   // Parse additional include paths from environment variables.
diff --git a/clang/lib/Driver/ToolChains/Darwin.cpp b/clang/lib/Driver/ToolChains/Darwin.cpp
index bb0cf01dd..57823d19e 100644
--- a/clang/lib/Driver/ToolChains/Darwin.cpp
+++ b/clang/lib/Driver/ToolChains/Darwin.cpp
@@ -18,6 +18,7 @@
 #include "clang/Driver/DriverDiagnostic.h"
 #include "clang/Driver/Options.h"
 #include "clang/Driver/SanitizerArgs.h"
+#include "clang/Frontend/CompilerInvocation.h"
 #include "llvm/ADT/StringSwitch.h"
 #include "llvm/Option/ArgList.h"
 #include "llvm/ProfileData/InstrProf.h"
@@ -261,6 +262,14 @@ void darwin::Linker::AddLinkArgs(Compilation &C, const ArgList &Args,
     }
   }
 
+  // add our vendor sysroot libs
+  {
+    llvm::SmallString<128> libDir = llvm::StringRef(D.Dir); // <install>/bin
+    llvm::sys::path::append(libDir, "..", "lib");
+    CmdArgs.push_back("-L");
+    CmdArgs.push_back(Args.MakeArgString(libDir));
+  }
+
   // Use -lto_library option to specify the libLTO.dylib path. Try to find
   // it in clang installed libraries. ld64 will only look at this argument
   // when it actually uses LTO, so libLTO.dylib only needs to exist at link
@@ -437,6 +446,9 @@ void darwin::Linker::AddLinkArgs(Compilation &C, const ArgList &Args,
   } else if (const Arg *A = Args.getLastArg(options::OPT_isysroot)) {
     CmdArgs.push_back("-syslibroot");
     CmdArgs.push_back(A->getValue());
+  } else if (auto default_sdk_path = CompilerInvocation::GetMacOSXDefaultSDKPath(); strlen(default_sdk_path) > 0) {
+    CmdArgs.push_back("-syslibroot");
+    CmdArgs.push_back(default_sdk_path);
   }
 
   Args.AddLastArg(CmdArgs, options::OPT_twolevel__namespace);
@@ -1083,6 +1095,13 @@ Darwin::~Darwin() {}
 
 MachO::~MachO() {}
 
+std::optional<std::string> Darwin::maybeGetMacOSXDefaultSDKPath() const {
+  std::string sdk = CompilerInvocation::GetMacOSXDefaultSDKPath();
+  if (sdk.empty() || sdk == "/")
+    return std::nullopt;
+  return sdk;
+}
+
 std::string Darwin::ComputeEffectiveClangTriple(const ArgList &Args,
                                                 types::ID InputType) const {
   llvm::Triple Triple(ComputeLLVMTriple(Args, InputType));
@@ -2441,6 +2460,8 @@ DarwinClang::GetEffectiveSysroot(const llvm::opt::ArgList &DriverArgs) const {
     Path = DriverArgs.getLastArgValue(options::OPT_isysroot);
   else if (!getDriver().SysRoot.empty())
     Path = getDriver().SysRoot;
+  else if (auto sdk_path = CompilerInvocation::GetMacOSXDefaultSDKPath(); strlen(sdk_path) > 0)
+    Path = sdk_path;
 
   if (hasEffectiveTriple()) {
     AppendPlatformPrefix(Path, getEffectiveTriple());
@@ -2478,6 +2499,13 @@ void DarwinClang::AddClangSystemIncludeArgs(const llvm::opt::ArgList &DriverArgs
   if (NoStdInc || NoStdlibInc)
     return;
 
+  // and <installed_dir>/../include
+  {
+    SmallString<128> P1(D.Dir);
+    llvm::sys::path::append(P1, "..", "include");
+    addExternCSystemInclude(DriverArgs, CC1Args, P1.str());
+  }
+
   // Check for configure-time C include directories.
   llvm::StringRef CIncludeDirs(C_INCLUDE_DIRS);
   if (!CIncludeDirs.empty()) {
diff --git a/clang/lib/Driver/ToolChains/Darwin.h b/clang/lib/Driver/ToolChains/Darwin.h
index f64e7180d..e292bb464 100644
--- a/clang/lib/Driver/ToolChains/Darwin.h
+++ b/clang/lib/Driver/ToolChains/Darwin.h
@@ -586,6 +586,8 @@ public:
     return LangOptions::SSPOff;
   }
 
+  std::optional<std::string> maybeGetMacOSXDefaultSDKPath() const override;
+
   void CheckObjCARC() const override;
 
   llvm::ExceptionHandling GetExceptionModel(
diff --git a/clang/lib/Frontend/CompilerInvocation.cpp b/clang/lib/Frontend/CompilerInvocation.cpp
index 0bb9c8c83..653c154fb 100644
--- a/clang/lib/Frontend/CompilerInvocation.cpp
+++ b/clang/lib/Frontend/CompilerInvocation.cpp
@@ -3127,5 +3127,9 @@ std::string CompilerInvocation::GetResourcesPath(const char *Argv0,
   return Driver::GetResourcesPath(ClangExecutable, CLANG_RESOURCE_DIR);
 }
 
+const char* CompilerInvocation::GetMacOSXDefaultSDKPath() {
+  return DEFAULT_OSX_SDK_PATH;
+}
+
 static void GenerateHeaderSearchArgs(const HeaderSearchOptions &Opts,
                                      ArgumentConsumer Consumer) {
@@ -3151,7 +3151,7 @@ static void GenerateHeaderSearchArgs(HeaderSearchOptions &Opts,
     GenerateArg(Consumer, OPT_fmodules_ignore_macro, Macro.val());
 
   auto Matches = [](const HeaderSearchOptions::Entry &Entry,
-                    llvm::ArrayRef<frontend::IncludeDirGroup> Groups,
+                    const std::vector<frontend::IncludeDirGroup>& Groups,
                     std::optional<bool> IsFramework,
                     std::optional<bool> IgnoreSysRoot) {
     return llvm::is_contained(Groups, Entry.Group) &&
@@ -3167,13 +3167,13 @@ static void GenerateHeaderSearchArgs(HeaderSearchOptions &Opts,
                              std::nullopt, true);
        ++It) {
     OptSpecifier Opt = [It, Matches]() {
-      if (Matches(*It, frontend::IndexHeaderMap, true, true))
+      if (Matches(*It, {frontend::IndexHeaderMap}, true, true))
         return OPT_F;
-      if (Matches(*It, frontend::IndexHeaderMap, false, true))
+      if (Matches(*It, {frontend::IndexHeaderMap}, false, true))
         return OPT_I;
-      if (Matches(*It, frontend::Angled, true, true))
+      if (Matches(*It, {frontend::Angled}, true, true))
         return OPT_F;
-      if (Matches(*It, frontend::Angled, false, true))
+      if (Matches(*It, {frontend::Angled}, false, true))
         return OPT_I;
       llvm_unreachable("Unexpected HeaderSearchOptions::Entry.");
     }();
diff --git a/clang/include/clang/Driver/Driver.h b/clang/include/clang/Driver/Driver.h
index 4bbb113b6..df68b3fb4 100644
--- a/clang/include/clang/Driver/Driver.h
+++ b/clang/include/clang/Driver/Driver.h
@@ -179,6 +179,9 @@ public:
   /// sysroot, if present
   std::string SysRoot;
 
+  /// was the sysroot manually specified? differentiates between --sysroot="" and not specifying it.
+  bool ExplicitSysRootGiven = false;
+
   /// Dynamic loader prefix, if present
   std::string DyldPrefix;
 
diff --git a/clang/lib/Driver/Driver.cpp b/clang/lib/Driver/Driver.cpp
index a268f2fa8..23643640e 100644
--- a/clang/lib/Driver/Driver.cpp
+++ b/clang/lib/Driver/Driver.cpp
@@ -1371,8 +1371,10 @@ Compilation *Driver::BuildCompilation(ArrayRef<const char *> ArgList) {
       CompilerPath = Split.second;
     }
   }
-  if (const Arg *A = Args.getLastArg(options::OPT__sysroot_EQ))
+  if (const Arg *A = Args.getLastArg(options::OPT__sysroot_EQ)) {
     SysRoot = A->getValue();
+    ExplicitSysRootGiven = true;
+  }
   if (const Arg *A = Args.getLastArg(options::OPT__dyld_prefix_EQ))
     DyldPrefix = A->getValue();
 
