--- a/clang-tools-extra/clangd/CompileCommands.cpp	2023-06-10 18:58:16.000000000 -0400
+++ b/clang-tools-extra/clangd/CompileCommands.cpp	2023-10-15 04:16:34.292518425 -0400
@@ -95,27 +95,49 @@
   // so if /usr/bin/clang is a symlink, it sees the resolved path.
   // clangd doesn't have that luxury, so we resolve symlinks ourselves.
 
-  // On Mac, `which clang` is /usr/bin/clang. It runs `xcrun clang`, which knows
-  // where the real clang is kept. We need to do the same thing,
-  // because cc1 (not the driver!) will find libc++ relative to argv[0].
-#ifdef __APPLE__
-  if (auto MacClang = queryXcrun({"xcrun", "--find", "clang"}))
-    return resolve(std::move(*MacClang));
-#endif
-  // On other platforms, just look for compilers on the PATH.
+  // previously, clangd would always preferentially use xcrun to find clang,
+  // which is a monumentally fucking stupid idea.
+
+  // a much better approach: FIRST, try compilers on path.
   for (const char *Name : {"clang", "gcc", "cc"})
     if (auto PathCC = llvm::sys::findProgramByName(Name))
       return resolve(std::move(*PathCC));
-  // Fallback: a nonexistent 'clang' binary next to clangd.
+
+  // THEN, if nothing in the path exists, we try using a 'clang' binary next
+  // to clangd. idk which clown decided that it would never exist, but it
+  // definitely should.
+
   static int StaticForMainAddr;
   std::string ClangdExecutable =
       llvm::sys::fs::getMainExecutable("clangd", (void *)&StaticForMainAddr);
   SmallString<128> ClangPath;
   ClangPath = llvm::sys::path::parent_path(ClangdExecutable);
   llvm::sys::path::append(ClangPath, "clang");
+
+  // if this exists, then we return it.
+  if (llvm::sys::fs::exists(ClangPath))
+    return std::string(ClangPath.str());
+
+  // On Mac, `which clang` is /usr/bin/clang. It runs `xcrun clang`, which knows
+  // where the real clang is kept. We need to do the same thing,
+  // because cc1 (not the driver!) will find libc++ relative to argv[0].
+#ifdef __APPLE__
+  if (auto MacClang = queryXcrun({"xcrun", "--find", "clang"}))
+    return resolve(std::move(*MacClang));
+#endif
+
+  // if a `clang` next to `clangd` did not exist, and either:
+  // we are not __APPLE__, *or* xcrun did not find clang, then
+  // just return the nonexistent path anyway.
   return std::string(ClangPath.str());
 }
 
+/*
+  NOTE: we don't need to change this in the patch, because we build
+  clang with the macOS system sysroot anyway.
+*/
+
+
 // On mac, /usr/bin/clang sets SDKROOT and then invokes the real clang.
 // The effect of this is to set -isysroot correctly. We do the same.
 std::optional<std::string> detectSysroot() {
