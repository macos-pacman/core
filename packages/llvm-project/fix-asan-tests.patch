diff --git a/compiler-rt/test/asan/TestCases/leaks.cpp b/compiler-rt/test/asan/TestCases/leaks.cpp
index 120781830..58b82af74 100644
--- a/compiler-rt/test/asan/TestCases/leaks.cpp
+++ b/compiler-rt/test/asan/TestCases/leaks.cpp
@@ -2,11 +2,11 @@
 // REQUIRES: leak-detection
 //
 // RUN: %clangxx_asan -O0 %s -o %t
-// RUN: not %run %t 0 2>&1 | FileCheck %s
-// RUN: not %run %t 1 2>&1 | FileCheck %s
-// RUN: not %run %t 1000 2>&1 | FileCheck %s
-// RUN: not %run %t 1000000 2>&1 | FileCheck %s
-// RUN: not %run %t 10000000 2>&1 | FileCheck %s
+// RUN: not %run %env_asan_opts=detect_leaks=1 %t 0 2>&1 | FileCheck %s
+// RUN: not %run %env_asan_opts=detect_leaks=1 %t 1 2>&1 | FileCheck %s
+// RUN: not %run %env_asan_opts=detect_leaks=1 %t 1000 2>&1 | FileCheck %s
+// RUN: not %run %env_asan_opts=detect_leaks=1 %t 1000000 2>&1 | FileCheck %s
+// RUN: not %run %env_asan_opts=detect_leaks=1 %t 10000000 2>&1 | FileCheck %s
 
 #include <cstdlib>
 #include <stdio.h>
diff --git a/compiler-rt/test/asan/lit.cfg.py b/compiler-rt/test/asan/lit.cfg.py
index 9f42e20dc..f2c3cccab 100644
--- a/compiler-rt/test/asan/lit.cfg.py
+++ b/compiler-rt/test/asan/lit.cfg.py
@@ -27,7 +27,12 @@ default_asan_opts = list(config.default_sanitizer_opts)
 # On Darwin, leak checking is not enabled by default. Enable on macOS
 # tests to prevent regressions
 if config.host_os == "Darwin" and config.apple_platform == "osx":
-    default_asan_opts += ["detect_leaks=1"]
+    pass # default_asan_opts += ["detect_leaks=1"]
+
+default_asan_opts += ["print_suppressions=0"]
+
+suppr = os.path.join(os.path.dirname(os.path.realpath(__file__)), "suppressions.txt")
+config.environment["LSAN_OPTIONS"] = "suppressions={}".format(suppr)
 
 default_asan_opts_str = ":".join(default_asan_opts)
 if default_asan_opts_str:
diff --git a/compiler-rt/test/sanitizer_common/lit.common.cfg.py b/compiler-rt/test/sanitizer_common/lit.common.cfg.py
index 13a21c6c4..19a339ba7 100644
--- a/compiler-rt/test/sanitizer_common/lit.common.cfg.py
+++ b/compiler-rt/test/sanitizer_common/lit.common.cfg.py
@@ -60,6 +60,11 @@ elif config.android:
     # which does not work for abort()-terminated programs.
     default_tool_options += ["abort_on_error=0"]

+if config.tool_name in ["lsan"]:
+    suppr = os.path.join(os.path.dirname(os.path.realpath(__file__)), "suppressions.txt")
+    default_tool_options += ["suppressions={}".format(suppr), "print_suppressions=0"]
+    # default_tool_options += []
+
 default_tool_options_str = ":".join(default_tool_options)
 if default_tool_options_str:
     config.environment[tool_options] = default_tool_options_str
diff --git a/compiler-rt/test/sanitizer_common/TestCases/Posix/dedup_token_length_test.cpp b/compiler-rt/test/sanitizer_common/TestCases/Posix/dedup_token_length_test.cpp
index deedbba76..155f3d408 100644
--- a/compiler-rt/test/sanitizer_common/TestCases/Posix/dedup_token_length_test.cpp
+++ b/compiler-rt/test/sanitizer_common/TestCases/Posix/dedup_token_length_test.cpp
@@ -34,5 +34,5 @@ int main(int argc, char **argv) {
 
 // CHECK0-NOT: DEDUP_TOKEN:
 // CHECK1: DEDUP_TOKEN: void Xyz::Abc<int, int>()
-// CHECK2: DEDUP_TOKEN: void Xyz::Abc<int, int>()--bar
-// CHECK3: DEDUP_TOKEN: void Xyz::Abc<int, int>()--bar--FOO()
+// CHECK2: DEDUP_TOKEN: void Xyz::Abc<int, int>()--{{bar|FOO\(\)}}
+// CHECK3: DEDUP_TOKEN: void Xyz::Abc<int, int>()--{{bar|FOO\(\)}}--{{main|FOO\(\)}}
diff --git a/compiler-rt/test/sanitizer_common/TestCases/sanitizer_coverage_stack_depth.cpp b/compiler-rt/test/sanitizer_common/TestCases/sanitizer_coverage_stack_depth.cpp
index 29a63c0a9..52dc03240 100644
--- a/compiler-rt/test/sanitizer_common/TestCases/sanitizer_coverage_stack_depth.cpp
+++ b/compiler-rt/test/sanitizer_common/TestCases/sanitizer_coverage_stack_depth.cpp
@@ -1,10 +1,10 @@
 // Tests -fsanitize-coverage=stack-depth
 //
 // RUN: %clangxx -O0 -std=c++11 -fsanitize-coverage=stack-depth %s -o %t
-// RUN: %run %t 2>&1 | FileCheck %s --implicit-check-not Assertion{{.*}}failed
+// RUN: %run LSAN_OPTIONS='detect_leaks=0' %t 2>&1 | FileCheck %s --implicit-check-not Assertion{{.*}}failed
 // RUN: %clangxx -O0 -std=c++11 -fsanitize-coverage=trace-pc-guard,stack-depth \
 // RUN:     %s -o %t
-// RUN: %run %t 2>&1 | FileCheck %s --implicit-check-not Assertion{{.*}}failed
+// RUN: %run LSAN_OPTIONS='detect_leaks=0' %t 2>&1 | FileCheck %s --implicit-check-not Assertion{{.*}}failed
 
 #include <cstdint>
 #include <cstdio>
diff --git a/compiler-rt/test/asan/TestCases/Posix/fread_fwrite.cpp b/compiler-rt/test/asan/TestCases/Posix/fread_fwrite.cpp
index c06292604..bf0eebc01 100644
--- a/compiler-rt/test/asan/TestCases/Posix/fread_fwrite.cpp
+++ b/compiler-rt/test/asan/TestCases/Posix/fread_fwrite.cpp
@@ -29,6 +29,6 @@ int main(int argc, char *argv[]) {
 }
 
 // CHECK-FREAD: {{.*ERROR: AddressSanitizer: stack-buffer-overflow}}
-// CHECK-FREAD: #{{.*}} in {{(wrap_|__interceptor_)?}}fread
+// CHECK-FREAD: #{{.*}} in {{(_*)(wrap_|__interceptor_)?(fread|sfvread)}}
 // CHECK-FWRITE: {{.*ERROR: AddressSanitizer: stack-buffer-overflow}}
-// CHECK-FWRITE: #{{.*}} in {{(wrap_|__interceptor_)?}}fwrite
+// CHECK-FWRITE: #{{.*}} in {{(_*)(wrap_|__interceptor_)?(fwrite|sfvwrite)}}
diff --git a/compiler-rt/test/sanitizer_common/TestCases/Darwin/malloc_zone.cpp b/compiler-rt/test/sanitizer_common/TestCases/Darwin/malloc_zone.cpp
index fd6ef0362..e8a212d94 100644
--- a/compiler-rt/test/sanitizer_common/TestCases/Darwin/malloc_zone.cpp
+++ b/compiler-rt/test/sanitizer_common/TestCases/Darwin/malloc_zone.cpp
@@ -8,11 +8,13 @@
 // MSL=lite creates its own special malloc zone, copies the passed zone name,
 // and leaks it.
 // RUN: echo "leak:create_and_insert_msl_lite_zone" >> lsan.supp
+// RUN: echo "leak:libobjc.A.dylib" >> lsan.supp
+// RUN: echo "leak:libobjc.A.dylib" >> lsan.supp1
 //
 // RUN: %clangxx -g %s -o %t
-// RUN:                                                                   %run %t | FileCheck %s
-// RUN: %env MallocStackLogging=lite LSAN_OPTIONS=suppressions=lsan.supp  %run %t | FileCheck %s
-// RUN: %env MallocStackLogging=full                                      %run %t | FileCheck %s
+// RUN:                                                                    %run %t | FileCheck %s
+// RUN: %env MallocStackLogging=lite LSAN_OPTIONS=suppressions=lsan.supp   %run %t | FileCheck %s
+// RUN: %env MallocStackLogging=full LSAN_OPTIONS=suppressions=lsan.supp1  %run %t | FileCheck %s
 //
 // UBSan does not install a malloc zone.
 // XFAIL: ubsan
