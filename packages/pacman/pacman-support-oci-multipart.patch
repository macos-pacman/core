diff --git a/lib/libalpm/be_local.c b/lib/libalpm/be_local.c
index 7940c31..93191ba 100644
--- a/lib/libalpm/be_local.c
+++ b/lib/libalpm/be_local.c
@@ -761,6 +761,8 @@ static int local_db_read(alpm_pkg_t *info, int inforeq)
 				READ_AND_STORE(info->url);
 			} else if(strcmp(line, "%OCI_NAME%") == 0) {
 				READ_AND_STORE(info->oci_name);
+			} else if(strcmp(line, "%OCI_DIGEST_LIST%") == 0) {
+				READ_AND_STORE_ALL(info->oci_digests);
 			} else if(strcmp(line, "%LICENSE%") == 0) {
 				READ_AND_STORE_ALL(info->licenses);
 			} else if(strcmp(line, "%ARCH%") == 0) {
@@ -1030,6 +1032,14 @@ int _alpm_local_db_write(alpm_db_t *db, alpm_pkg_t *info, int inforeq)
 			}
 			fputc('\n', fp);
 		}
+		if(info->oci_digests) {
+			fputs("%OCI_DIGEST_LIST%\n", fp);
+			for(lp = info->oci_digests; lp; lp = lp->next) {
+				fputs(lp->data, fp);
+				fputc('\n', fp);
+			}
+			fputc('\n', fp);
+		}
 		if(info->validation) {
 			fputs("%VALIDATION%\n", fp);
 			if(info->validation & ALPM_PKG_VALIDATION_NONE) {
diff --git a/lib/libalpm/be_sync.c b/lib/libalpm/be_sync.c
index 2ea8460..bdfa3f6 100644
--- a/lib/libalpm/be_sync.c
+++ b/lib/libalpm/be_sync.c
@@ -603,6 +603,8 @@ static int sync_db_read(alpm_db_t *db, struct archive *archive,
 				READ_AND_STORE(pkg->url);
 			} else if(strcmp(line, "%OCI_NAME%") == 0) {
 				READ_AND_STORE(pkg->oci_name);
+			} else if(strcmp(line, "%OCI_DIGEST_LIST%") == 0) {
+				READ_AND_STORE_ALL(pkg->oci_digests);
 			} else if(strcmp(line, "%LICENSE%") == 0) {
 				READ_AND_STORE_ALL(pkg->licenses);
 			} else if(strcmp(line, "%ARCH%") == 0) {
@@ -679,6 +681,11 @@ static int sync_db_read(alpm_db_t *db, struct archive *archive,
 		_alpm_log(db->handle, ALPM_LOG_DEBUG, "unknown database file: %s\n", filename);
 	}
 
+	// if OCI_DIGEST_LIST was not provided, populate pkg->oci_digests with the sha256sum
+	if(pkg->oci_digests == NULL && pkg->sha256sum != NULL) {
+		alpm_list_append_strdup(&pkg->oci_digests, pkg->sha256sum);
+	}
+
 	return 0;
 
 error:
diff --git a/lib/libalpm/dload.c b/lib/libalpm/dload.c
index b2dabaf..bc4c4ba 100644
--- a/lib/libalpm/dload.c
+++ b/lib/libalpm/dload.c
@@ -49,6 +49,10 @@
 #include "util.h"
 #include "handle.h"
 
+#ifndef HAVE_LIBCURL
+	#error "libcurl is required for this to work"
+#endif
+
 #ifdef HAVE_LIBCURL
 
 /* RFC1123 states applications should support this length */
@@ -148,7 +152,7 @@ static int prepare_download_url(alpm_handle_t* handle, char** ret_fileurl,
 		download the database, but OCI+digests to download packages"
 	*/
 	if(strncmp(server, "oci://", 6) == 0) {
-		if(payload->oci_database && payload->oci_pkg_name && payload->oci_sha256) {
+		if(payload->oci_database && payload->oci_pkg_name && payload->oci_digest) {
 			/* ok, now convert this a bit. */
 			size_t prefix_len = strlen("oci://github.com/");
 
@@ -173,7 +177,7 @@ static int prepare_download_url(alpm_handle_t* handle, char** ret_fileurl,
 					(int) remote_org_len, org_start,
 					payload->oci_database,
 					payload->oci_pkg_name,
-					payload->oci_sha256
+					(const char*) payload->oci_digest->data
 				);
 
 				*ret_fileurl = download_url;
@@ -474,6 +478,7 @@ static FILE *create_tempfile(struct dload_payload *payload, const char *localpat
 	return fp;
 }
 
+
 /* Return 0 if retry was successful, -1 otherwise */
 static int curl_retry_next_server(CURLM *curlm, CURL *curl, struct dload_payload *payload)
 {
@@ -532,7 +537,31 @@ static int curl_retry_next_server(CURLM *curlm, CURL *curl, struct dload_payload
 	return 0;
 }
 
-/* Returns 2 if download retry happened
+static int curl_download_next_layer(CURLM *curlm, CURL *curl, struct dload_payload *payload)
+{
+	const char *server = payload->used_server;
+	alpm_handle_t *handle = payload->handle;
+
+	/* regenerate a new fileurl */
+	FREE(payload->fileurl);
+
+	if(prepare_download_url(handle, &payload->fileurl, server, payload) != 0) {
+		RET_ERR(handle, ALPM_ERR_MEMORY, -1);
+	}
+
+	// keep the file.
+	fflush(payload->localf);
+
+	/* Set curl with the new URL */
+	curl_easy_setopt(curl, CURLOPT_URL, payload->fileurl);
+
+	curl_multi_remove_handle(curlm, curl);
+	curl_multi_add_handle(curlm, curl);
+	return 0;
+}
+
+/* Returns 3 if we are not done with downloading a multi-layer OCI image
+ * Returns 2 if download retry happened
  * Returns 1 if the file is up-to-date
  * Returns 0 if current payload is completed successfully
  * Returns -1 if an error happened for a required file
@@ -597,6 +626,20 @@ static int curl_check_finished_download(CURLM *curlm, CURLMsg *msg,
 					payload->unlink_on_fail = 1;
 					goto cleanup;
 				}
+			} else if(payload->oci_digest != NULL && (payload->oci_digest = payload->oci_digest->next) != NULL) {
+				/*
+					it was a success; if this is part of a multi-layer OCI image, we need
+					to download the other parts.
+				*/
+
+				if(fstat(fileno(payload->localf), &st) == 0) {
+					payload->initial_size = st.st_size;
+				}
+
+				if(curl_download_next_layer(curlm, curl, payload) == 0) {
+					(*active_downloads_num)++;
+					return 3;
+				}
 			}
 			break;
 		case CURLE_ABORTED_BY_CALLBACK:
@@ -688,7 +731,7 @@ static int curl_check_finished_download(CURLM *curlm, CURLMsg *msg,
 	*/
 	if(!payload->signature &&
 		payload->download_signature &&
-		payload->oci_sha256 == NULL &&
+		payload->oci_pkg_name == NULL &&
 		curlerr == CURLE_OK &&
 		payload->respcode < 400)
 	{
@@ -850,6 +893,8 @@ static int curl_add_payload(alpm_handle_t *handle, CURLM *curlm,
 		ASSERT(payload->filepath, GOTO_ERR(handle, ALPM_ERR_WRONG_ARGS, cleanup));
 
 		server = payload->servers->data;
+		payload->used_server = server;
+
 		payload->servers = payload->servers->next;
 
 		if(prepare_download_url(handle, &payload->fileurl, server, payload) != 0) {
@@ -1183,5 +1228,6 @@ void _alpm_dload_payload_reset(struct dload_payload *payload)
 	FREE(payload->content_disp_name);
 	FREE(payload->fileurl);
 	FREE(payload->filepath);
+	alpm_list_free(payload->oci_digest);
 	*payload = (struct dload_payload){0};
 }
diff --git a/lib/libalpm/dload.h b/lib/libalpm/dload.h
index 80962d3..df0abc0 100644
--- a/lib/libalpm/dload.h
+++ b/lib/libalpm/dload.h
@@ -58,9 +58,12 @@ struct dload_payload {
 #endif
 
 	/* new fields for supporting container-registry downloads */
+	const char* used_server;
+
 	char* oci_database;
 	char* oci_pkg_name;
-	char* oci_sha256;
+
+	alpm_list_t* oci_digest;
 };
 
 void _alpm_dload_payload_reset(struct dload_payload *payload);
diff --git a/lib/libalpm/package.h b/lib/libalpm/package.h
index 3a042c3..521cc1b 100644
--- a/lib/libalpm/package.h
+++ b/lib/libalpm/package.h
@@ -142,6 +142,8 @@ struct __alpm_pkg_t {
 	int infolevel;
 	/* Bitfield from alpm_pkgvalidation_t */
 	int validation;
+
+	alpm_list_t *oci_digests;
 };
 
 alpm_file_t *_alpm_file_copy(alpm_file_t *dest, const alpm_file_t *src);
diff --git a/lib/libalpm/sync.c b/lib/libalpm/sync.c
index 379fb15..90bdfa3 100644
--- a/lib/libalpm/sync.c
+++ b/lib/libalpm/sync.c
@@ -763,7 +763,6 @@ static int find_dl_candidates(alpm_handle_t *handle, alpm_list_t **files)
 	return 0;
 }
 
-
 static int prepare_download_payload(alpm_handle_t* handle, alpm_pkg_t* pkg, struct dload_payload** out_payload)
 {
 	struct dload_payload *payload = NULL;
@@ -797,13 +796,14 @@ static int prepare_download_payload(alpm_handle_t* handle, alpm_pkg_t* pkg, stru
 		return -1;
 	);
 
-	STRDUP(payload->oci_sha256, pkg->sha256sum,
+	payload->oci_digest = alpm_list_copy(pkg->oci_digests);
+	if(payload->oci_digest == NULL) {
 		FREE(payload->oci_database);
 		FREE(payload->oci_pkg_name);
 		FREE(payload->filepath);
 		FREE(payload);
 		return -1;
-	);
+	}
 
 	*out_payload = payload;
 	return 0;
diff --git a/scripts/repo-add.sh.in b/scripts/repo-add.sh.in
index dedfa6a..2733cfc 100644
--- a/scripts/repo-add.sh.in
+++ b/scripts/repo-add.sh.in
@@ -42,6 +42,7 @@ LOCKFILE=
 CLEAN_LOCK=0
 USE_COLOR='y'
 PREVENT_DOWNGRADE=0
+OCI_DIGEST_LIST=()
 
 # Import libmakepkg
 source "$LIBRARY"/util/compress.sh
@@ -62,9 +63,10 @@ repo-add will update a package database by reading a package file.\n\
 Multiple packages to add can be specified on the command line.\n")"
 		printf -- "\n"
 		printf -- "$(gettext "Options:\n")"
-		printf --            "  --oci-name <name> use this name as the OCI package name\n"
-		printf -- "$(gettext "  -n, --new         only add packages that are not already in the database\n")"
-		printf -- "$(gettext "  -R, --remove      remove old package file from disk after updating database\n")"
+		printf --            "  --oci-name <name>  use this name as the OCI package name\n"
+		printf --            "  --oci-digest <sha> add this digest to the list\n"
+		printf -- "$(gettext "  -n, --new          only add packages that are not already in the database\n")"
+		printf -- "$(gettext "  -R, --remove       remove old package file from disk after updating database\n")"
 		printf -- "$(gettext "  -p, --prevent-downgrade  do not add package to database if a newer version is already present\n")"
 	elif [[ $cmd == "repo-remove" ]] ; then
 		printf -- "$(gettext "Usage: repo-remove [options] <path-to-db> <packagename> ...\n")"
@@ -328,6 +330,10 @@ db_write_entry() {
 		if [ -n "${OCI_NAME}" ]; then
 			format_entry "OCI_NAME" "${OCI_NAME}"
 		fi
+
+		if [ ${#OCI_DIGEST_LIST[@]} -gt 0 ]; then
+			format_entry "OCI_DIGEST_LIST" "${OCI_DIGEST_LIST[@]}"
+		fi
 	} >'desc'
 
 	popd >/dev/null
@@ -625,6 +631,10 @@ while (( $# )); do
 			shift
 			OCI_NAME="$1"
 			;;
+		--oci-digest)
+			shift
+			OCI_DIGEST_LIST+=("$1")
+			;;
 		-v|--verify)
 			VERIFY=1
 			;;
@@ -680,8 +690,8 @@ fi
 
 prepare_repo_db
 
-if [ -n "${OCI_NAME}" ] && [ ${#args[@]} -gt 2 ]; then
-	error "Cannot use --oci-name when adding more than one package"
+if ( [ -n "${OCI_NAME}" ] || [ ${#OCI_DIGEST_LIST[@]} -gt 0 ] ) && [ ${#args[@]} -gt 2 ]; then
+	error "Cannot use --oci-name or --oci-digest when adding more than one package"
 	exit 1
 fi
 
