--- a/scripts/repo-add.sh.in	2024-01-27 01:46:53.685232597 -0500
+++ b/scripts/repo-add.sh.in	2024-01-27 01:48:09.601118305 -0500
@@ -62,6 +62,7 @@
 Multiple packages to add can be specified on the command line.\n")"
 		printf -- "\n"
 		printf -- "$(gettext "Options:\n")"
+		printf --            "  --oci-name <name> use this name as the OCI package name\n"
 		printf -- "$(gettext "  -n, --new         only add packages that are not already in the database\n")"
 		printf -- "$(gettext "  -R, --remove      remove old package file from disk after updating database\n")"
 		printf -- "$(gettext "  -p, --prevent-downgrade  do not add package to database if a newer version is already present\n")"
@@ -323,6 +324,10 @@
 		format_entry "OPTDEPENDS" "${_optdepends[@]}"
 		format_entry "MAKEDEPENDS" "${_makedepends[@]}"
 		format_entry "CHECKDEPENDS" "${_checkdepends[@]}"
+
+		if [ -n "${OCI_NAME}" ]; then
+			format_entry "OCI_NAME" "${OCI_NAME}"
+		fi
 	} >'desc'
 
 	popd >/dev/null
@@ -616,6 +621,10 @@
 			shift
 			GPGKEY=$1
 			;;
+		--oci-name)
+			shift
+			OCI_NAME="$1"
+			;;
 		-v|--verify)
 			VERIFY=1
 			;;
@@ -671,6 +680,11 @@
 
 prepare_repo_db
 
+if [ -n "${OCI_NAME}" ] && [ ${#args[@]} -gt 2 ]; then
+	error "Cannot use --oci-name when adding more than one package"
+	exit 1
+fi
+
 fail=0
 for arg in "${args[@]:1}"; do
 	case $cmd in
--- a/lib/libalpm/be_local.c	2022-10-02 22:52:04.000000000 -0400
+++ b/lib/libalpm/be_local.c	2024-01-27 02:01:16.912991844 -0500
@@ -81,6 +81,12 @@ static const char *_cache_get_url(alpm_p
 	return pkg->url;
 }
 
+static const char *_cache_get_oci_name(alpm_pkg_t *pkg)
+{
+	LAZY_LOAD(INFRQ_DESC);
+	return pkg->oci_name;
+}
+
 static alpm_time_t _cache_get_builddate(alpm_pkg_t *pkg)
 {
 	LAZY_LOAD(INFRQ_DESC);
@@ -330,6 +336,7 @@ static const struct pkg_operations local
 	.get_base = _cache_get_base,
 	.get_desc = _cache_get_desc,
 	.get_url = _cache_get_url,
+	.get_oci_name = _cache_get_oci_name,
 	.get_builddate = _cache_get_builddate,
 	.get_installdate = _cache_get_installdate,
 	.get_packager = _cache_get_packager,
@@ -752,6 +759,8 @@ static int local_db_read(alpm_pkg_t *inf
 				READ_AND_STORE_ALL(info->groups);
 			} else if(strcmp(line, "%URL%") == 0) {
 				READ_AND_STORE(info->url);
+			} else if(strcmp(line, "%OCI_NAME%") == 0) {
+				READ_AND_STORE(info->oci_name);
 			} else if(strcmp(line, "%LICENSE%") == 0) {
 				READ_AND_STORE_ALL(info->licenses);
 			} else if(strcmp(line, "%ARCH%") == 0) {
@@ -976,6 +985,10 @@ int _alpm_local_db_write(alpm_db_t *db,
 			fprintf(fp, "%%URL%%\n"
 							"%s\n\n", info->url);
 		}
+		if(info->oci_name) {
+			fprintf(fp, "%%OCI_NAME%%\n"
+							"%s\n\n", info->oci_name);
+		}
 		if(info->arch) {
 			fprintf(fp, "%%ARCH%%\n"
 							"%s\n\n", info->arch);
--- a/lib/libalpm/be_sync.c	2022-10-02 22:52:04.000000000 -0400
+++ b/lib/libalpm/be_sync.c	2024-01-27 02:02:41.290553587 -0500
@@ -601,6 +601,8 @@ static int sync_db_read(alpm_db_t *db, s
 				READ_AND_STORE_ALL(pkg->groups);
 			} else if(strcmp(line, "%URL%") == 0) {
 				READ_AND_STORE(pkg->url);
+			} else if(strcmp(line, "%OCI_NAME%") == 0) {
+				READ_AND_STORE(pkg->oci_name);
 			} else if(strcmp(line, "%LICENSE%") == 0) {
 				READ_AND_STORE_ALL(pkg->licenses);
 			} else if(strcmp(line, "%ARCH%") == 0) {
--- a/lib/libalpm/be_package.c	2022-10-02 22:52:04.000000000 -0400
+++ b/lib/libalpm/be_package.c	2024-01-27 02:02:18.201653486 -0500
@@ -205,6 +205,8 @@ static int parse_descfile(alpm_handle_t
 				newpkg->groups = alpm_list_add(newpkg->groups, tmp);
 			} else if(strcmp(key, "url") == 0) {
 				STRDUP(newpkg->url, ptr, return -1);
+			} else if(strcmp(key, "oci_name") == 0) {
+				STRDUP(newpkg->oci_name, ptr, return -1);
 			} else if(strcmp(key, "license") == 0) {
 				char *tmp = NULL;
 				STRDUP(tmp, ptr, return -1);
--- a/lib/libalpm/package.c	2022-10-02 22:52:04.000000000 -0400
+++ b/lib/libalpm/package.c	2024-01-27 02:03:40.241234275 -0500
@@ -78,6 +78,7 @@ int SYMEXPORT alpm_pkg_checkmd5sum(alpm_
 static const char *_pkg_get_base(alpm_pkg_t *pkg)        { return pkg->base; }
 static const char *_pkg_get_desc(alpm_pkg_t *pkg)        { return pkg->desc; }
 static const char *_pkg_get_url(alpm_pkg_t *pkg)         { return pkg->url; }
+static const char *_pkg_get_oci_name(alpm_pkg_t *pkg)    { return pkg->oci_name; }
 static alpm_time_t _pkg_get_builddate(alpm_pkg_t *pkg)   { return pkg->builddate; }
 static alpm_time_t _pkg_get_installdate(alpm_pkg_t *pkg) { return pkg->installdate; }
 static const char *_pkg_get_packager(alpm_pkg_t *pkg)    { return pkg->packager; }
@@ -142,6 +143,7 @@ const struct pkg_operations default_pkg_
 	.get_base        = _pkg_get_base,
 	.get_desc        = _pkg_get_desc,
 	.get_url         = _pkg_get_url,
+	.get_oci_name    = _pkg_get_oci_name,
 	.get_builddate   = _pkg_get_builddate,
 	.get_installdate = _pkg_get_installdate,
 	.get_packager    = _pkg_get_packager,
@@ -226,6 +228,13 @@ const char SYMEXPORT *alpm_pkg_get_url(a
 	return pkg->ops->get_url(pkg);
 }
 
+const char SYMEXPORT *alpm_pkg_get_oci_name(alpm_pkg_t *pkg)
+{
+	ASSERT(pkg != NULL, return NULL);
+	pkg->handle->pm_errno = ALPM_ERR_OK;
+	return pkg->ops->get_oci_name(pkg);
+}
+
 alpm_time_t SYMEXPORT alpm_pkg_get_builddate(alpm_pkg_t *pkg)
 {
 	ASSERT(pkg != NULL, return -1);
@@ -610,6 +619,7 @@ int _alpm_pkg_dup(alpm_pkg_t *pkg, alpm_
 	STRDUP(newpkg->version, pkg->version, goto cleanup);
 	STRDUP(newpkg->desc, pkg->desc, goto cleanup);
 	STRDUP(newpkg->url, pkg->url, goto cleanup);
+	STRDUP(newpkg->oci_name, pkg->oci_name, goto cleanup);
 	newpkg->builddate = pkg->builddate;
 	newpkg->installdate = pkg->installdate;
 	STRDUP(newpkg->packager, pkg->packager, goto cleanup);
@@ -683,6 +693,7 @@ void _alpm_pkg_free(alpm_pkg_t *pkg)
 	FREE(pkg->version);
 	FREE(pkg->desc);
 	FREE(pkg->url);
+	FREE(pkg->oci_name);
 	FREE(pkg->packager);
 	FREE(pkg->md5sum);
 	FREE(pkg->sha256sum);
--- a/lib/libalpm/package.h	2022-10-02 22:52:04.000000000 -0400
+++ b/lib/libalpm/package.h	2024-01-27 02:00:04.778609138 -0500
@@ -46,6 +46,7 @@ struct pkg_operations {
 	const char *(*get_base) (alpm_pkg_t *);
 	const char *(*get_desc) (alpm_pkg_t *);
 	const char *(*get_url) (alpm_pkg_t *);
+	const char *(*get_oci_name) (alpm_pkg_t *);
 	alpm_time_t (*get_builddate) (alpm_pkg_t *);
 	alpm_time_t (*get_installdate) (alpm_pkg_t *);
 	const char *(*get_packager) (alpm_pkg_t *);
@@ -93,6 +94,7 @@ struct __alpm_pkg_t {
 	char *version;
 	char *desc;
 	char *url;
+	char *oci_name;
 	char *packager;
 	char *md5sum;
 	char *sha256sum;
--- a/lib/libalpm/sync.c	2024-01-27 02:09:31.998900141 -0500
+++ b/lib/libalpm/sync.c	2024-01-27 02:04:21.907572148 -0500
@@ -790,7 +790,7 @@ static int prepare_download_payload(alpm
 		return -1;
 	);
 
-	STRDUP(payload->oci_pkg_name, pkg->name,
+	STRDUP(payload->oci_pkg_name, (pkg->oci_name ? pkg->oci_name : pkg->name),
 		FREE(payload->oci_database);
 		FREE(payload->filepath);
 		FREE(payload);
