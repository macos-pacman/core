#!/bin/bash

[[ -n "$LIBMAKEPKG_LINT_PACKAGE_LIBRARY_RPATH_SH" ]] && return
LIBMAKEPKG_LINT_PACKAGE_LIBRARY_RPATH_SH=1

LIBRARY=${LIBRARY:-'@libmakepkgdir@'}

source "$LIBRARY/util/message.sh"

lint_package_functions+=('warn_library_rpath')

strip_libname() {
	local args="$@"
	local _tmp
	read -r -d '' -a _tmp <<< "${args}"
	_tmp="${_tmp[0]}"

	echo "${_tmp}"
}

_RPATH_FILES=()
_PROBLEM_FILES=()

_find_referenced_file() {
	if [ -e "${1}" ] || [ -e "${pkgdir}/${1}" ]; then
		return 0
	fi

	# check whether we are doing split packages
	# if so, see whether it exists in the other split packages
	if (( $SPLITPKG )); then
		# kinda hacky, but this variable leaks from makepkg.
		local _p; for _p in "${pkgname_backup[@]}"; do
			if [[ -e "${pkgdir}/../${_p}/${1}" ]] && in_array "${_p}" "${depends[@]}"; then
				return 0
			fi
		done
	fi
	return 1
}

check_file() {
	local lines
	IFS=$'\n' read -r -d '' -a lines <<< "$1"

	# this chops off the trailing ':'
	local file=${lines[0]%:*}

	# even for fat files, the filename must be the same among all architectures
	# so we can just use the first one as the name.
	# check for that ' (architecture '
	if (echo "${file}" | grep -P -q ' \(architecture '); then
		# cursed contraption: basically remove the entire architecture part from the end.
		file="${file/% (architecture *)/}"
	fi

	broken_libs=()
	rpath_libs=()

	# otool will only print the 'architecture' thing if there's more than one architecture in the file
	# (i think...). so, if we see this, then there must be another architecture somewhere.
	# use the other algorithm if so.
	local _match=0

	local _i; for (( _i = 0; _i < ${#lines[@]}; _i++ )); do
		# echo "line: "${lines[_i]}": match = $_match"
		case "${lines[_i]}" in
			$'\t'*)
				if (( $_match )); then
					# check it
					local _libname=$(strip_libname "${lines[_i]}")
					case "${_libname}" in
						# note: we do this "does it exist" check only for things under our root dir, because
						# of the whole dyld cache thing that means dylibs don't actually exist on-disk.
						"/usr/lib/"* | "/System/Library/"* | "/Library/"*) ;;

						# if it doesn't exist, complain. note that we should check under ${pkgdir} since
						# we (likely) will be looking at dylibs referencing stuff from the currently-being-packaged
						# $pkgdir tree (and not under '/')
						"$(pacman-root-dir)/"*)
							if ! _find_referenced_file "${_libname}"; then
								error "Library/executable '${file#"$pkgdir/"}' -- missing dylib ${_libname}"
								broken_libs+=("${lines[_i]}")
							fi ;;

						"@rpath"*) rpath_libs+=("${lines[_i]}")  ;;
						*)         broken_libs+=("${lines[_i]}") ;;
					esac
				fi ;;
			*)
				# see if the architecture is correct. note: ${CARCH} defined in makepkg.conf
				local _arch=$(echo "${lines[_i]}" | grep -Po ' \(architecture \K(.+)(?=\))')
				if [ -z ${_arch} ] || [ "${_arch}" = "${CARCH}" ]; then
					_match=1
				else
					_match=0
				fi ;;
		esac
	done

	local warn_rpath=0

	if [ "${#rpath_libs[@]}" -gt 0 ]; then
		if otool -l "${file}" | grep -q 'LC_RPATH'; then
			warn_rpath=1
		else
			broken_libs+=("${rpath_libs[@]}")
		fi
	fi


	if [ "${#broken_libs[@]}" -gt 0 ]; then
		_PROBLEM_FILES+=("${file}")
	elif (( $warn_rpath )); then
		_RPATH_FILES+=("${file}")
	fi
}

warn_library_rpath() {
	local tmp
	local file
	local problems

	local ret=0

	find "$pkgdir" -type f -print0 | {
		local _ret=0
		while IFS= read -r -d '' file; do
			tmp=$(file "${file}")
			case "$tmp" in
				*"executable"* | *"shared library"* | *"bundle"*) ;;
				*) continue ;;
			esac
			# if it's a symlink and points to a nonexistent file, ignore it.
			if [ -L "${_file}" ] && [ ! -e $(readlink -f "${_file}") ]; then
				echo "ignoring ${_file}"
				continue
			fi

			tmp=$(otool -L "${file}")
			case "$tmp" in
				"Archive : "* | *"is not an object file"*) ;;
				*) check_file "$tmp" ;;
			esac
		done
		if [ ${#_PROBLEM_FILES[@]} -gt 0 ]; then
			if [ -z ${ignore_broken_dylibs:-} ]; then
				local ignore_broken_dylibs=()
			fi
			local _f; for _f in "${_PROBLEM_FILES[@]}"; do
				local _x; _x='0'
				local _m; for _m in "${ignore_broken_dylibs[@]}"; do
					local _f1="${_f#"${pkgdir/}"}"
					# echo  "${_f1#/}" "vs ${_m#/}"
					if [[ "${_f1#/}" == ${_m#/} ]]; then
						_x=1; break
					fi
				done
				if [ "$_x" = "0" ]; then
					error 'Package contains dylib with broken path(s): %s' "${_f#"$pkgdir/"}"
					_ret=1
				fi
			done
		fi

		if [ ${#_RPATH_FILES[@]} -gt 0 ]; then
			if [ -z ${ignore_rpath:-} ]; then
				local ignore_rpath=()
			fi
			local _f; for _f in "${_RPATH_FILES[@]}"; do
				local _x; _x='0'
				local _m; for _m in "${ignore_rpath[@]}"; do
					local _f1="${_f#"${pkgdir/}"}"
					# echo  "${_f1#/}" "vs ${_m#/}"
					if [[ "${_f1#/}" == ${_m#/} ]]; then
						_x=1; break
					fi
				done
				if [ "$_x" = "0" ]; then
					error 'Package contains object with @rpath: %s' "${_f#"$pkgdir/"}"
				fi
			done
		fi

		return $_ret
	} || ret=1

	return $ret
}
