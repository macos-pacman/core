# Maintainer: zhiayang <zhiayang@nowhere>

_hkgname=test-framework
pkgname=haskell-${_hkgname}
pkgver=0.8.2.0
pkgrel=2
pkgdesc="Framework for running and organising tests, with HUnit and QuickCheck support"
url="https://hackage.haskell.org/package/${_hkgname}"
license=('BSD')
arch=('x86_64' 'arm64')
depends=('ghc-libs'
  'haskell-ansi-terminal'
  'haskell-ansi-wl-pprint'
  'haskell-containers'
  'haskell-hostname'
  'haskell-old-locale'
  'haskell-random'
  'haskell-regex-posix'
  'haskell-time'
  'haskell-xml'
)
checkdepends=(
  'haskell-hunit'
  'haskell-hostname'
  'haskell-libxml'
  'haskell-bytestring'
  'haskell-semigroups'
)
makedepends=('ghc' 'uusi')
source=("https://hackage.haskell.org/packages/archive/$_hkgname/$pkgver/$_hkgname-$pkgver.tar.gz")
sha512sums=('d8e7ea274819a1b49b9f938df527d22c808f456d25b84f03173ed57dddd39c230fb037a57ce90c38f571801ee38e86bed6826df1c93f184e4a803c72ce5f41e4')

prepare() {
  cd $_hkgname-$pkgver
  uusi -u 'ansi-terminal: >=0.4.0 && <1.1' \
       -u 'random: >=1.0 && <1.3' \
       -u 'regex-posix: >=0.72 && <0.97' \
       -u 'time: >=1.1.2 && <1.13' \
       -u 'containers: >=0.1 && <0.7' \
    ${_hkgname}.cabal
}

build() {
  local _notests=1
# template start; name=haskell-build; version=1.0;
  cd $_hkgname-$pkgver

  local _opts
  if (( CHECKFUNC )) && [ -z ${_notests+x} ]; then
    _opts=('--enable-tests')
  else
    _opts=('--disable-tests')
  fi

  runhaskell Setup configure -O --disable-static --enable-shared --enable-executable-dynamic \
    --prefix=${pacman_root}/usr \
    --docdir=${pacman_root}/usr/share/doc/$pkgname \
    --datasubdir=$pkgname \
    --dynlibdir='$libdir' \
    -ftemplateHaskell --ghc-option=-fllvm --ghc-option=-fhide-source-paths \
    --flags="${_build_flags:-}" \
    "${_opts[@]}"

  runhaskell Setup build $MAKEFLAGS

  if [ -z ${_no_register+x} ]; then
    runhaskell Setup register --gen-script
    runhaskell Setup unregister --gen-script

    sed -i -r -e "s|ghc-pkg.*update[^ ]* |&'--force' |" register.sh
    sed -i -r -e "s|ghc-pkg.*unregister[^ ]* |&'--force' |" unregister.sh
  fi
# template end;
}

package() {
# template start; name=haskell-package; version=1.0;
  cd $_hkgname-$pkgver

  if [ -z ${_no_register+x} ]; then
    install -D -m744 register.sh "$pkgdir/${pacman_root}/usr/share/haskell/register/$pkgname.sh"
    install -D -m744 unregister.sh "$pkgdir/${pacman_root}/usr/share/haskell/unregister/${pkgname}.sh"
  fi

  local _license_name=${license_name-LICENSE}

  runhaskell Setup copy --destdir="$pkgdir"

  if [ -z ${_no_license+x} ]; then
    install -D -m644 "${_license_name}" "$pkgdir/${pacman_root}/usr/share/licenses/$pkgname/LICENSE"
    rm "$pkgdir"/${pacman_root}/usr/share/doc/$pkgname/${_license_name}
  fi

  local dl; for dl in ${pkgdir}/${pacman_root}/usr/lib/*.dylib ${pkgdir}/${pacman_root}/usr/bin/* ; do
    [ ! -e "${dl}" ] || fix_rpath "${dl}"
  done
# template end;
}

# vim: ts=2 sw=2 et:
