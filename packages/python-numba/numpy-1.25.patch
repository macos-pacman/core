From 614a1cb9a8ff92b41f4751ca91b11fea464d9ebd Mon Sep 17 00:00:00 2001
From: Andre Masella <andre@masella.name>
Date: Mon, 12 Jun 2023 14:31:05 -0400
Subject: [PATCH 01/17] Implementation and test updates to support NumPy 1.25

NumPy 1.25 has two major changes:

- allow mixed signed comparisons ufuncs (the `qQ->?` and `Qq->?`
  implementations for `>`, `<`, `>=`, `<=`, `==`, `!=`); this mode was not
  supported by Numba and an appropriate implementation is added to match the C
  implementation in NumPy.
- the implementation of `sin` and `cos` are changed in a way that produces
  slightly different numeric results. This either lowers the comparison
  precision where these functions are used in tests or replaces them with
  another function (mostly `exp`) to avoid the differences.
---
 numba/cpython/numbers.py             | 52 ++++++++++++++++++++++++++++
 numba/np/ufunc_db.py                 | 24 +++++++++++++
 numba/tests/test_array_exprs.py      |  4 +--
 numba/tests/test_extending.py        |  4 +--
 numba/tests/test_fancy_indexing.py   |  2 +-
 numba/tests/test_looplifting.py      |  8 ++---
 numba/tests/test_np_functions.py     |  2 +-
 numba/tests/test_target_extension.py |  8 ++---
 8 files changed, 90 insertions(+), 14 deletions(-)

diff --git a/numba/cpython/numbers.py b/numba/cpython/numbers.py
index d0115235961..67b76e0adc8 100644
--- a/numba/cpython/numbers.py
+++ b/numba/cpython/numbers.py
@@ -361,6 +361,58 @@ def int_ne_impl(context, builder, sig, args):
     return impl_ret_untracked(context, builder, sig.return_type, res)
 
 
+def int_su_cmp(op):
+    def impl(context, builder, sig, args):
+        (left, right) = args
+        bb_lt_zero = builder.append_basic_block(".lt_zero")
+        bb_ge_zero = builder.append_basic_block(".ge_zero")
+        bb_exit = builder.append_basic_block(".cmp_exit")
+        cmp_zero = builder.icmp_signed('<', left, Constant(left.type, 0))
+        builder.cbranch(cmp_zero, bb_lt_zero, bb_ge_zero)
+
+        builder.position_at_end(bb_exit)
+        phi = builder.phi(ir.IntType(1))
+
+        with builder.goto_block(bb_lt_zero):
+            res = builder.icmp_unsigned(op, left, Constant(left.type, 0))
+            phi.add_incoming(res, bb_lt_zero)
+            builder.branch(bb_exit)
+
+        with builder.goto_block(bb_ge_zero):
+            res = builder.icmp_unsigned(op, left, right)
+            phi.add_incoming(res, bb_ge_zero)
+            builder.branch(bb_exit)
+
+        return impl_ret_untracked(context, builder, sig.return_type, phi)
+    return impl
+
+
+def int_us_cmp(op):
+    def impl(context, builder, sig, args):
+        (left, right) = args
+        bb_lt_zero = builder.append_basic_block(".lt_zero")
+        bb_ge_zero = builder.append_basic_block(".ge_zero")
+        bb_exit = builder.append_basic_block(".cmp_exit")
+        cmp_zero = builder.icmp_signed('<', right, Constant(right.type, 0))
+        builder.cbranch(cmp_zero, bb_lt_zero, bb_ge_zero)
+
+        builder.position_at_end(bb_exit)
+        phi = builder.phi(ir.IntType(1))
+
+        with builder.goto_block(bb_lt_zero):
+            res = builder.icmp_unsigned(op, Constant(right.type, 0), right)
+            phi.add_incoming(res, bb_lt_zero)
+            builder.branch(bb_exit)
+
+        with builder.goto_block(bb_ge_zero):
+            res = builder.icmp_unsigned(op, left, right)
+            phi.add_incoming(res, bb_ge_zero)
+            builder.branch(bb_exit)
+
+        return impl_ret_untracked(context, builder, sig.return_type, phi)
+    return impl
+
+
 def int_abs_impl(context, builder, sig, args):
     [x] = args
     ZERO = Constant(x.type, None)
diff --git a/numba/np/ufunc_db.py b/numba/np/ufunc_db.py
index 6ce1c3ab3dd..ebcce3a1174 100644
--- a/numba/np/ufunc_db.py
+++ b/numba/np/ufunc_db.py
@@ -620,6 +620,10 @@ def _fill_ufunc_db(ufunc_db):
         'FF->?': npyfuncs.np_complex_gt_impl,
         'DD->?': npyfuncs.np_complex_gt_impl,
     }
+    if numpy_version >= (1, 25):
+        ufunc_db[np.greater].update({
+            'qQ->?': numbers.int_su_cmp('>'),
+            'Qq->?': numbers.int_us_cmp('>')})
 
     ufunc_db[np.greater_equal] = {
         '??->?': numbers.int_uge_impl,
@@ -638,6 +642,10 @@ def _fill_ufunc_db(ufunc_db):
         'FF->?': npyfuncs.np_complex_ge_impl,
         'DD->?': npyfuncs.np_complex_ge_impl,
     }
+    if numpy_version >= (1, 25):
+        ufunc_db[np.greater_equal].update({
+            'qQ->?': numbers.int_su_cmp('>='),
+            'Qq->?': numbers.int_us_cmp('>=')})
 
     ufunc_db[np.less] = {
         '??->?': numbers.int_ult_impl,
@@ -656,6 +664,10 @@ def _fill_ufunc_db(ufunc_db):
         'FF->?': npyfuncs.np_complex_lt_impl,
         'DD->?': npyfuncs.np_complex_lt_impl,
     }
+    if numpy_version >= (1, 25):
+        ufunc_db[np.less].update({
+            'qQ->?': numbers.int_su_cmp('<'),
+            'Qq->?': numbers.int_us_cmp('<')})
 
     ufunc_db[np.less_equal] = {
         '??->?': numbers.int_ule_impl,
@@ -674,6 +686,10 @@ def _fill_ufunc_db(ufunc_db):
         'FF->?': npyfuncs.np_complex_le_impl,
         'DD->?': npyfuncs.np_complex_le_impl,
     }
+    if numpy_version >= (1, 25):
+        ufunc_db[np.less_equal].update({
+            'qQ->?': numbers.int_su_cmp('<='),
+            'Qq->?': numbers.int_us_cmp('<=')})
 
     ufunc_db[np.not_equal] = {
         '??->?': numbers.int_ne_impl,
@@ -692,6 +708,10 @@ def _fill_ufunc_db(ufunc_db):
         'FF->?': npyfuncs.np_complex_ne_impl,
         'DD->?': npyfuncs.np_complex_ne_impl,
     }
+    if numpy_version >= (1, 25):
+        ufunc_db[np.not_equal].update({
+            'qQ->?': numbers.int_su_cmp('!='),
+            'Qq->?': numbers.int_us_cmp('!=')})
 
     ufunc_db[np.equal] = {
         '??->?': numbers.int_eq_impl,
@@ -710,6 +730,10 @@ def _fill_ufunc_db(ufunc_db):
         'FF->?': npyfuncs.np_complex_eq_impl,
         'DD->?': npyfuncs.np_complex_eq_impl,
     }
+    if numpy_version >= (1, 25):
+        ufunc_db[np.equal].update({
+            'qQ->?': numbers.int_su_cmp('=='),
+            'Qq->?': numbers.int_us_cmp('==')})
 
     ufunc_db[np.logical_and] = {
         '??->?': npyfuncs.np_logical_and_impl,
diff --git a/numba/tests/test_array_exprs.py b/numba/tests/test_array_exprs.py
index 090bbd5ad48..c0fdd3470c9 100644
--- a/numba/tests/test_array_exprs.py
+++ b/numba/tests/test_array_exprs.py
@@ -244,8 +244,8 @@ def run_func(fn):
             return out
 
         expected = run_func(fn)
-        self.assertPreciseEqual(expected, run_func(control_cfunc))
-        self.assertPreciseEqual(expected, run_func(test_cfunc))
+        np.testing.assert_allclose(expected, run_func(control_cfunc))
+        np.testing.assert_allclose(expected, run_func(test_cfunc))
 
         return Namespace(locals())
 
diff --git a/numba/tests/test_extending.py b/numba/tests/test_extending.py
index 024c600b4c0..48e566c9868 100644
--- a/numba/tests/test_extending.py
+++ b/numba/tests/test_extending.py
@@ -638,7 +638,7 @@ def test_index_ufunc(self):
         cfunc = jit(nopython=True)(npyufunc_usecase)
         ii = cfunc(i)
         self.assertIsInstance(ii, Index)
-        self.assertPreciseEqual(ii._data, np.cos(np.sin(i._data)))
+        np.testing.assert_allclose(ii._data, np.cos(np.sin(i._data)))
 
     def test_index_get_data(self):
         # The _data attribute is exposed with make_attribute_wrapper()
@@ -685,7 +685,7 @@ def test_series_ufunc(self):
         self.assertIsInstance(ss, Series)
         self.assertIsInstance(ss._index, Index)
         self.assertIs(ss._index._data, i._data)
-        self.assertPreciseEqual(ss._values, np.cos(np.sin(s._values)))
+        np.testing.assert_allclose(ss._values, np.cos(np.sin(s._values)))
 
     def test_series_constructor(self):
         i = Index(np.int32([42, 8, -5]))
diff --git a/numba/tests/test_fancy_indexing.py b/numba/tests/test_fancy_indexing.py
index 5d909963fd0..e160063c045 100644
--- a/numba/tests/test_fancy_indexing.py
+++ b/numba/tests/test_fancy_indexing.py
@@ -406,7 +406,7 @@ def numba_get_item(array, idx):
         expected = get_item(arr, index)
         got = numba_get_item(arr, index)
         # Sanity check: In advanced indexing, the result is always a copy.
-        self.assertNotIn(expected.base, orig_base)
+        self.assertIsNot(expected.base, orig_base)
 
         # Note: Numba may not return the same array strides and
         # contiguity as NumPy
diff --git a/numba/tests/test_looplifting.py b/numba/tests/test_looplifting.py
index 23ffa9d2364..f95a0d6eead 100644
--- a/numba/tests/test_looplifting.py
+++ b/numba/tests/test_looplifting.py
@@ -586,16 +586,16 @@ def foo(a, b, c, d, x0, y0, n):
             xs, ys = np.zeros(n), np.zeros(n)
             xs[0], ys[0] = x0, y0
             for i in np.arange(n-1):
-                xs[i+1] = np.sin(a * ys[i]) + c * np.cos(a * xs[i])
-                ys[i+1] = np.sin(b * xs[i]) + d * np.cos(b * ys[i])
+                xs[i+1] = np.exp(a * ys[i]) + c * np.exp(a * xs[i])
+                ys[i+1] = np.exp(b * xs[i]) + d * np.exp(b * ys[i])
             object() # ensure object mode
             return xs, ys
 
         kwargs = dict(a=1.7, b=1.7, c=0.6, d=1.2, x0=0, y0=0, n=200)
         got = foo(**kwargs)
         expected = foo.py_func(**kwargs)
-        self.assertPreciseEqual(got[0], expected[0])
-        self .assertPreciseEqual(got[1], expected[1])
+        np.testing.assert_allclose(got[0], expected[0])
+        np.testing.assert_allclose(got[1], expected[1])
         [lifted] = foo.overloads[foo.signatures[0]].lifted
         self.assertEqual(len(lifted.nopython_signatures), 1)
 
diff --git a/numba/tests/test_np_functions.py b/numba/tests/test_np_functions.py
index 191d8c42ae0..91521653ad6 100644
--- a/numba/tests/test_np_functions.py
+++ b/numba/tests/test_np_functions.py
@@ -4728,7 +4728,7 @@ def check_window(func):
             for M in [0, 1, 5, 12]:
                 expected = np_pyfunc(M)
                 got = np_nbfunc(M)
-                self.assertPreciseEqual(expected, got, prec='double')
+                np.testing.assert_allclose(expected, got, atol=1e-6)
 
             for M in ['a', 1.1, 1j]:
                 with self.assertRaises(TypingError) as raises:
diff --git a/numba/tests/test_target_extension.py b/numba/tests/test_target_extension.py
index 739e4ee861a..06a6e55b4fb 100644
--- a/numba/tests/test_target_extension.py
+++ b/numba/tests/test_target_extension.py
@@ -770,9 +770,9 @@ def foo(x):
 
         @njit
         def foo(x):
-            return np.sin(x)
+            return np.exp(x)
 
-        self.assertPreciseEqual(foo(5), np.sin(5))
+        self.assertPreciseEqual(foo(5), np.exp(5))
 
         @register_pass(mutates_CFG=False, analysis_only=False)
         class DispatcherSwitcher(FunctionPass):
@@ -843,9 +843,9 @@ def define_pipelines(self):
         # that switches CPU calls for DPU calls
         @njit(pipeline_class=DPUOffloadCompiler)
         def foo(x):
-            return np.sin(x), np.cos(x)  # np.sin is DPU, np.cos is CPU
+            return np.log(x), np.exp(x)  # np.log is DPU, np.exp is CPU
 
-        self.assertPreciseEqual(foo(5), (314159.0, np.cos(5)))
+        self.assertPreciseEqual(foo(5), (np.log(5), np.exp(5)))
 
 
 if __name__ == "__main__":

From 7db7e9901d3bb88563330db45afb00c7d9aa362c Mon Sep 17 00:00:00 2001
From: Andre Masella <andre@masella.name>
Date: Tue, 13 Jun 2023 07:47:26 -0400
Subject: [PATCH 02/17] Improve implementation mixed sign comparison ufuncs

Changes the implementations to use `select` rather than a branching path for
better optimization potential.
---
 numba/cpython/numbers.py | 56 +++++++++++++---------------------------
 1 file changed, 18 insertions(+), 38 deletions(-)

diff --git a/numba/cpython/numbers.py b/numba/cpython/numbers.py
index 67b76e0adc8..0a8c7c74fd6 100644
--- a/numba/cpython/numbers.py
+++ b/numba/cpython/numbers.py
@@ -364,52 +364,32 @@ def int_ne_impl(context, builder, sig, args):
 def int_su_cmp(op):
     def impl(context, builder, sig, args):
         (left, right) = args
-        bb_lt_zero = builder.append_basic_block(".lt_zero")
-        bb_ge_zero = builder.append_basic_block(".ge_zero")
-        bb_exit = builder.append_basic_block(".cmp_exit")
+        # This code is entirely too clever. It's taken from the NumPy source.
+        # What we're going to do is divide the range of a signed value at zero.
+        # If the signed value is less than zero, then we can treat zero as the
+        # unsigned value since the unsigned value is necessarily zero or larger
+        # and any signed comparison between a negative value and zero/infinity
+        # will yield the same result. If the signed value is greater than or
+        # equal to zero, then we can safely cast it to an unsigned value and do
+        # the expected unsigned-unsigned comparison operation.
         cmp_zero = builder.icmp_signed('<', left, Constant(left.type, 0))
-        builder.cbranch(cmp_zero, bb_lt_zero, bb_ge_zero)
-
-        builder.position_at_end(bb_exit)
-        phi = builder.phi(ir.IntType(1))
-
-        with builder.goto_block(bb_lt_zero):
-            res = builder.icmp_unsigned(op, left, Constant(left.type, 0))
-            phi.add_incoming(res, bb_lt_zero)
-            builder.branch(bb_exit)
-
-        with builder.goto_block(bb_ge_zero):
-            res = builder.icmp_unsigned(op, left, right)
-            phi.add_incoming(res, bb_ge_zero)
-            builder.branch(bb_exit)
-
-        return impl_ret_untracked(context, builder, sig.return_type, phi)
+        lt_zero = builder.icmp_signed(op, left, Constant(left.type, 0))
+        ge_zero = builder.icmp_unsigned(op, left, right)
+        res = builder.select(cmp_zero, lt_zero, ge_zero)
+        return impl_ret_untracked(context, builder, sig.return_type, res)
     return impl
 
 
 def int_us_cmp(op):
     def impl(context, builder, sig, args):
         (left, right) = args
-        bb_lt_zero = builder.append_basic_block(".lt_zero")
-        bb_ge_zero = builder.append_basic_block(".ge_zero")
-        bb_exit = builder.append_basic_block(".cmp_exit")
+        # This code is entirely too clever. See the sister implementation for
+        # details
         cmp_zero = builder.icmp_signed('<', right, Constant(right.type, 0))
-        builder.cbranch(cmp_zero, bb_lt_zero, bb_ge_zero)
-
-        builder.position_at_end(bb_exit)
-        phi = builder.phi(ir.IntType(1))
-
-        with builder.goto_block(bb_lt_zero):
-            res = builder.icmp_unsigned(op, Constant(right.type, 0), right)
-            phi.add_incoming(res, bb_lt_zero)
-            builder.branch(bb_exit)
-
-        with builder.goto_block(bb_ge_zero):
-            res = builder.icmp_unsigned(op, left, right)
-            phi.add_incoming(res, bb_ge_zero)
-            builder.branch(bb_exit)
-
-        return impl_ret_untracked(context, builder, sig.return_type, phi)
+        lt_zero = builder.icmp_signed(op, Constant(right.type, 0), right)
+        ge_zero = builder.icmp_unsigned(op, left, right)
+        res = builder.select(cmp_zero, lt_zero, ge_zero)
+        return impl_ret_untracked(context, builder, sig.return_type, res)
     return impl
 
 

From b11bafba98e9de5de1196d9578190d9e0ad9f856 Mon Sep 17 00:00:00 2001
From: Andre Masella <andre@masella.name>
Date: Tue, 20 Jun 2023 15:24:17 -0400
Subject: [PATCH 03/17] Revert sin/cos changes for NumPy 1.25

The corresponding change was removed from NumPy 1.25 so any numeric changes for
sin/cos are also being reverted.
---
 numba/tests/test_array_exprs.py      | 4 ++--
 numba/tests/test_extending.py        | 4 ++--
 numba/tests/test_fancy_indexing.py   | 2 +-
 numba/tests/test_looplifting.py      | 8 ++++----
 numba/tests/test_np_functions.py     | 2 +-
 numba/tests/test_target_extension.py | 8 ++++----
 6 files changed, 14 insertions(+), 14 deletions(-)

diff --git a/numba/tests/test_array_exprs.py b/numba/tests/test_array_exprs.py
index c0fdd3470c9..090bbd5ad48 100644
--- a/numba/tests/test_array_exprs.py
+++ b/numba/tests/test_array_exprs.py
@@ -244,8 +244,8 @@ def run_func(fn):
             return out
 
         expected = run_func(fn)
-        np.testing.assert_allclose(expected, run_func(control_cfunc))
-        np.testing.assert_allclose(expected, run_func(test_cfunc))
+        self.assertPreciseEqual(expected, run_func(control_cfunc))
+        self.assertPreciseEqual(expected, run_func(test_cfunc))
 
         return Namespace(locals())
 
diff --git a/numba/tests/test_extending.py b/numba/tests/test_extending.py
index 48e566c9868..024c600b4c0 100644
--- a/numba/tests/test_extending.py
+++ b/numba/tests/test_extending.py
@@ -638,7 +638,7 @@ def test_index_ufunc(self):
         cfunc = jit(nopython=True)(npyufunc_usecase)
         ii = cfunc(i)
         self.assertIsInstance(ii, Index)
-        np.testing.assert_allclose(ii._data, np.cos(np.sin(i._data)))
+        self.assertPreciseEqual(ii._data, np.cos(np.sin(i._data)))
 
     def test_index_get_data(self):
         # The _data attribute is exposed with make_attribute_wrapper()
@@ -685,7 +685,7 @@ def test_series_ufunc(self):
         self.assertIsInstance(ss, Series)
         self.assertIsInstance(ss._index, Index)
         self.assertIs(ss._index._data, i._data)
-        np.testing.assert_allclose(ss._values, np.cos(np.sin(s._values)))
+        self.assertPreciseEqual(ss._values, np.cos(np.sin(s._values)))
 
     def test_series_constructor(self):
         i = Index(np.int32([42, 8, -5]))
diff --git a/numba/tests/test_fancy_indexing.py b/numba/tests/test_fancy_indexing.py
index e160063c045..5d909963fd0 100644
--- a/numba/tests/test_fancy_indexing.py
+++ b/numba/tests/test_fancy_indexing.py
@@ -406,7 +406,7 @@ def numba_get_item(array, idx):
         expected = get_item(arr, index)
         got = numba_get_item(arr, index)
         # Sanity check: In advanced indexing, the result is always a copy.
-        self.assertIsNot(expected.base, orig_base)
+        self.assertNotIn(expected.base, orig_base)
 
         # Note: Numba may not return the same array strides and
         # contiguity as NumPy
diff --git a/numba/tests/test_looplifting.py b/numba/tests/test_looplifting.py
index f95a0d6eead..23ffa9d2364 100644
--- a/numba/tests/test_looplifting.py
+++ b/numba/tests/test_looplifting.py
@@ -586,16 +586,16 @@ def foo(a, b, c, d, x0, y0, n):
             xs, ys = np.zeros(n), np.zeros(n)
             xs[0], ys[0] = x0, y0
             for i in np.arange(n-1):
-                xs[i+1] = np.exp(a * ys[i]) + c * np.exp(a * xs[i])
-                ys[i+1] = np.exp(b * xs[i]) + d * np.exp(b * ys[i])
+                xs[i+1] = np.sin(a * ys[i]) + c * np.cos(a * xs[i])
+                ys[i+1] = np.sin(b * xs[i]) + d * np.cos(b * ys[i])
             object() # ensure object mode
             return xs, ys
 
         kwargs = dict(a=1.7, b=1.7, c=0.6, d=1.2, x0=0, y0=0, n=200)
         got = foo(**kwargs)
         expected = foo.py_func(**kwargs)
-        np.testing.assert_allclose(got[0], expected[0])
-        np.testing.assert_allclose(got[1], expected[1])
+        self.assertPreciseEqual(got[0], expected[0])
+        self .assertPreciseEqual(got[1], expected[1])
         [lifted] = foo.overloads[foo.signatures[0]].lifted
         self.assertEqual(len(lifted.nopython_signatures), 1)
 
diff --git a/numba/tests/test_np_functions.py b/numba/tests/test_np_functions.py
index 91521653ad6..191d8c42ae0 100644
--- a/numba/tests/test_np_functions.py
+++ b/numba/tests/test_np_functions.py
@@ -4728,7 +4728,7 @@ def check_window(func):
             for M in [0, 1, 5, 12]:
                 expected = np_pyfunc(M)
                 got = np_nbfunc(M)
-                np.testing.assert_allclose(expected, got, atol=1e-6)
+                self.assertPreciseEqual(expected, got, prec='double')
 
             for M in ['a', 1.1, 1j]:
                 with self.assertRaises(TypingError) as raises:
diff --git a/numba/tests/test_target_extension.py b/numba/tests/test_target_extension.py
index 06a6e55b4fb..739e4ee861a 100644
--- a/numba/tests/test_target_extension.py
+++ b/numba/tests/test_target_extension.py
@@ -770,9 +770,9 @@ def foo(x):
 
         @njit
         def foo(x):
-            return np.exp(x)
+            return np.sin(x)
 
-        self.assertPreciseEqual(foo(5), np.exp(5))
+        self.assertPreciseEqual(foo(5), np.sin(5))
 
         @register_pass(mutates_CFG=False, analysis_only=False)
         class DispatcherSwitcher(FunctionPass):
@@ -843,9 +843,9 @@ def define_pipelines(self):
         # that switches CPU calls for DPU calls
         @njit(pipeline_class=DPUOffloadCompiler)
         def foo(x):
-            return np.log(x), np.exp(x)  # np.log is DPU, np.exp is CPU
+            return np.sin(x), np.cos(x)  # np.sin is DPU, np.cos is CPU
 
-        self.assertPreciseEqual(foo(5), (np.log(5), np.exp(5)))
+        self.assertPreciseEqual(foo(5), (314159.0, np.cos(5)))
 
 
 if __name__ == "__main__":

From e338e22a934f16b08a749439793b8c2b3829b098 Mon Sep 17 00:00:00 2001
From: Andre Masella <andre@masella.name>
Date: Tue, 27 Jun 2023 16:29:53 -0400
Subject: [PATCH 06/17] Rename mixed signedness code and reference original

As titled.
---
 numba/cpython/numbers.py |  5 +++--
 numba/np/ufunc_db.py     | 24 ++++++++++++------------
 2 files changed, 15 insertions(+), 14 deletions(-)

diff --git a/numba/cpython/numbers.py b/numba/cpython/numbers.py
index 0a8c7c74fd6..44b8b296b75 100644
--- a/numba/cpython/numbers.py
+++ b/numba/cpython/numbers.py
@@ -361,7 +361,7 @@ def int_ne_impl(context, builder, sig, args):
     return impl_ret_untracked(context, builder, sig.return_type, res)
 
 
-def int_su_cmp(op):
+def int_signed_unsigned_cmp(op):
     def impl(context, builder, sig, args):
         (left, right) = args
         # This code is entirely too clever. It's taken from the NumPy source.
@@ -372,6 +372,7 @@ def impl(context, builder, sig, args):
         # will yield the same result. If the signed value is greater than or
         # equal to zero, then we can safely cast it to an unsigned value and do
         # the expected unsigned-unsigned comparison operation.
+        # Original: https://github.com/numpy/numpy/pull/23713
         cmp_zero = builder.icmp_signed('<', left, Constant(left.type, 0))
         lt_zero = builder.icmp_signed(op, left, Constant(left.type, 0))
         ge_zero = builder.icmp_unsigned(op, left, right)
@@ -380,7 +381,7 @@ def impl(context, builder, sig, args):
     return impl
 
 
-def int_us_cmp(op):
+def int_unsigned_signed_cmp(op):
     def impl(context, builder, sig, args):
         (left, right) = args
         # This code is entirely too clever. See the sister implementation for
diff --git a/numba/np/ufunc_db.py b/numba/np/ufunc_db.py
index ebcce3a1174..cf2422f6db2 100644
--- a/numba/np/ufunc_db.py
+++ b/numba/np/ufunc_db.py
@@ -622,8 +622,8 @@ def _fill_ufunc_db(ufunc_db):
     }
     if numpy_version >= (1, 25):
         ufunc_db[np.greater].update({
-            'qQ->?': numbers.int_su_cmp('>'),
-            'Qq->?': numbers.int_us_cmp('>')})
+            'qQ->?': numbers.int_signed_unsigned_cmp('>'),
+            'Qq->?': numbers.int_unsigned_signed_cmp('>')})
 
     ufunc_db[np.greater_equal] = {
         '??->?': numbers.int_uge_impl,
@@ -644,8 +644,8 @@ def _fill_ufunc_db(ufunc_db):
     }
     if numpy_version >= (1, 25):
         ufunc_db[np.greater_equal].update({
-            'qQ->?': numbers.int_su_cmp('>='),
-            'Qq->?': numbers.int_us_cmp('>=')})
+            'qQ->?': numbers.int_signed_unsigned_cmp('>='),
+            'Qq->?': numbers.int_unsigned_signed_cmp('>=')})
 
     ufunc_db[np.less] = {
         '??->?': numbers.int_ult_impl,
@@ -666,8 +666,8 @@ def _fill_ufunc_db(ufunc_db):
     }
     if numpy_version >= (1, 25):
         ufunc_db[np.less].update({
-            'qQ->?': numbers.int_su_cmp('<'),
-            'Qq->?': numbers.int_us_cmp('<')})
+            'qQ->?': numbers.int_signed_unsigned_cmp('<'),
+            'Qq->?': numbers.int_unsigned_signed_cmp('<')})
 
     ufunc_db[np.less_equal] = {
         '??->?': numbers.int_ule_impl,
@@ -688,8 +688,8 @@ def _fill_ufunc_db(ufunc_db):
     }
     if numpy_version >= (1, 25):
         ufunc_db[np.less_equal].update({
-            'qQ->?': numbers.int_su_cmp('<='),
-            'Qq->?': numbers.int_us_cmp('<=')})
+            'qQ->?': numbers.int_signed_unsigned_cmp('<='),
+            'Qq->?': numbers.int_unsigned_signed_cmp('<=')})
 
     ufunc_db[np.not_equal] = {
         '??->?': numbers.int_ne_impl,
@@ -710,8 +710,8 @@ def _fill_ufunc_db(ufunc_db):
     }
     if numpy_version >= (1, 25):
         ufunc_db[np.not_equal].update({
-            'qQ->?': numbers.int_su_cmp('!='),
-            'Qq->?': numbers.int_us_cmp('!=')})
+            'qQ->?': numbers.int_signed_unsigned_cmp('!='),
+            'Qq->?': numbers.int_unsigned_signed_cmp('!=')})
 
     ufunc_db[np.equal] = {
         '??->?': numbers.int_eq_impl,
@@ -732,8 +732,8 @@ def _fill_ufunc_db(ufunc_db):
     }
     if numpy_version >= (1, 25):
         ufunc_db[np.equal].update({
-            'qQ->?': numbers.int_su_cmp('=='),
-            'Qq->?': numbers.int_us_cmp('==')})
+            'qQ->?': numbers.int_signed_unsigned_cmp('=='),
+            'Qq->?': numbers.int_unsigned_signed_cmp('==')})
 
     ufunc_db[np.logical_and] = {
         '??->?': npyfuncs.np_logical_and_impl,

From 5e3ff5e4f0a7f614c67c5b310c8fea50a31191eb Mon Sep 17 00:00:00 2001
From: Andre Masella <andre@masella.name>
Date: Tue, 27 Jun 2023 16:41:00 -0400
Subject: [PATCH 07/17] Remove dependency on `umath_tests`

Switch `numpy.core.umath_tests.matrix_multiply`, which is private API, with
`numpy.matmul`, which is public.
---
 buildscripts/incremental/test.cmd      |  3 ---
 buildscripts/incremental/test.sh       |  3 ---
 numba/__init__.py                      |  2 +-
 numba/cuda/tests/cudapy/test_gufunc.py | 13 ++++++-------
 numba/tests/npyufunc/test_gufunc.py    |  5 ++---
 5 files changed, 9 insertions(+), 17 deletions(-)

diff --git a/numba/cuda/tests/cudapy/test_gufunc.py b/numba/cuda/tests/cudapy/test_gufunc.py
index 5f9914e478d..8f4de36ea7e 100644
--- a/numba/cuda/tests/cudapy/test_gufunc.py
+++ b/numba/cuda/tests/cudapy/test_gufunc.py
@@ -1,5 +1,4 @@
 import numpy as np
-import numpy.core.umath_tests as ut
 
 from collections import namedtuple
 from numba import void, int32, float32, float64
@@ -42,7 +41,7 @@ def test_gufunc_small(self):
                                                                    5)
 
         C = gufunc(A, B)
-        Gold = ut.matrix_multiply(A, B)
+        Gold = np.matmul(A, B)
         self.assertTrue(np.allclose(C, Gold))
 
     def test_gufunc_auto_transfer(self):
@@ -58,7 +57,7 @@ def test_gufunc_auto_transfer(self):
         dB = cuda.to_device(B)
 
         C = gufunc(A, dB).copy_to_host()
-        Gold = ut.matrix_multiply(A, B)
+        Gold = np.matmul(A, B)
         self.assertTrue(np.allclose(C, Gold))
 
     def test_gufunc(self):
@@ -72,7 +71,7 @@ def test_gufunc(self):
                                                                    5)
 
         C = gufunc(A, B)
-        Gold = ut.matrix_multiply(A, B)
+        Gold = np.matmul(A, B)
         self.assertTrue(np.allclose(C, Gold))
 
     def test_gufunc_hidim(self):
@@ -84,7 +83,7 @@ def test_gufunc_hidim(self):
         B = np.arange(matrix_ct * 4 * 5, dtype=np.float32).reshape(4, 25, 4, 5)
 
         C = gufunc(A, B)
-        Gold = ut.matrix_multiply(A, B)
+        Gold = np.matmul(A, B)
         self.assertTrue(np.allclose(C, Gold))
 
     def test_gufunc_new_axis(self):
@@ -94,7 +93,7 @@ def test_gufunc_new_axis(self):
         X = np.random.randn(10, 3, 3)
         Y = np.random.randn(3, 3)
 
-        gold = ut.matrix_multiply(X, Y)
+        gold = np.matmul(X, Y)
 
         res1 = gufunc(X, Y)
         np.testing.assert_allclose(gold, res1)
@@ -122,7 +121,7 @@ def test_gufunc_stream(self):
         C = dC.copy_to_host(stream=stream)
         stream.synchronize()
 
-        Gold = ut.matrix_multiply(A, B)
+        Gold = np.matmul(A, B)
 
         self.assertTrue(np.allclose(C, Gold))
 
diff --git a/numba/tests/npyufunc/test_gufunc.py b/numba/tests/npyufunc/test_gufunc.py
index c5c6f9c94cd..44fff6fb787 100644
--- a/numba/tests/npyufunc/test_gufunc.py
+++ b/numba/tests/npyufunc/test_gufunc.py
@@ -2,7 +2,6 @@
 import pickle
 
 import numpy as np
-import numpy.core.umath_tests as ut
 
 from numba import void, float32, int64, jit, guvectorize
 from numba.np.ufunc import GUVectorize
@@ -33,7 +32,7 @@ def check_matmul_gufunc(self, gufunc):
         B = np.arange(matrix_ct * 4 * 5, dtype=np.float32).reshape(matrix_ct, 4, 5)
 
         C = gufunc(A, B)
-        Gold = ut.matrix_multiply(A, B)
+        Gold = np.matmul(A, B)
 
         np.testing.assert_allclose(C, Gold, rtol=1e-5, atol=1e-8)
 
@@ -108,7 +107,7 @@ class TestDynamicGUFunc(TestCase):
     def test_dynamic_matmul(self):
 
         def check_matmul_gufunc(gufunc, A, B, C):
-            Gold = ut.matrix_multiply(A, B)
+            Gold = np.matmul(A, B)
             gufunc(A, B, C)
             np.testing.assert_allclose(C, Gold, rtol=1e-5, atol=1e-8)
 

From bde1ec51afba27313c127d3815aee4f2fc5ebe4c Mon Sep 17 00:00:00 2001
From: Andre Masella <andre@masella.name>
Date: Thu, 6 Jul 2023 14:38:33 -0400
Subject: [PATCH 10/17] Update numba/cpython/numbers.py

Co-authored-by: stuartarchibald <stuartarchibald@users.noreply.github.com>
---
 numba/cpython/numbers.py | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/numba/cpython/numbers.py b/numba/cpython/numbers.py
index 44b8b296b75..02c4c860d59 100644
--- a/numba/cpython/numbers.py
+++ b/numba/cpython/numbers.py
@@ -384,8 +384,7 @@ def impl(context, builder, sig, args):
 def int_unsigned_signed_cmp(op):
     def impl(context, builder, sig, args):
         (left, right) = args
-        # This code is entirely too clever. See the sister implementation for
-        # details
+        # See the function `int_signed_unsigned_cmp` for implementation notes.
         cmp_zero = builder.icmp_signed('<', right, Constant(right.type, 0))
         lt_zero = builder.icmp_signed(op, Constant(right.type, 0), right)
         ge_zero = builder.icmp_unsigned(op, left, right)

From e8fe800967c895c97aba33280d4ffeb299900e1e Mon Sep 17 00:00:00 2001
From: Andre Masella <andre@masella.name>
Date: Thu, 6 Jul 2023 14:39:57 -0400
Subject: [PATCH 11/17] Update numba/cpython/numbers.py

Co-authored-by: stuartarchibald <stuartarchibald@users.noreply.github.com>
---
 numba/cpython/numbers.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/numba/cpython/numbers.py b/numba/cpython/numbers.py
index 02c4c860d59..9c616cb8e37 100644
--- a/numba/cpython/numbers.py
+++ b/numba/cpython/numbers.py
@@ -364,7 +364,7 @@ def int_ne_impl(context, builder, sig, args):
 def int_signed_unsigned_cmp(op):
     def impl(context, builder, sig, args):
         (left, right) = args
-        # This code is entirely too clever. It's taken from the NumPy source.
+        # This code is translated from the NumPy source.
         # What we're going to do is divide the range of a signed value at zero.
         # If the signed value is less than zero, then we can treat zero as the
         # unsigned value since the unsigned value is necessarily zero or larger

From 47550a5accbdf2553ba0fb3b2284bf0565336221 Mon Sep 17 00:00:00 2001
From: Andre Masella <andre@masella.name>
Date: Thu, 6 Jul 2023 14:41:05 -0400
Subject: [PATCH 12/17] Update gpuCI config for NumPy 1.25

---
 buildscripts/gpuci/build.sh | 11 ++---------
 1 file changed, 2 insertions(+), 9 deletions(-)

diff --git a/buildscripts/gpuci/build.sh b/buildscripts/gpuci/build.sh
index 441082f1390..3ae4904798e 100644
--- a/buildscripts/gpuci/build.sh
+++ b/buildscripts/gpuci/build.sh
@@ -35,17 +35,10 @@ fi;
 # Test with different NumPy versions with each toolkit (it's not worth testing
 # the Cartesian product of versions here, we just need to test with different
 # CUDA and NumPy versions).
-declare -A CTK_NUMPY_VMAP=( ["11.0"]="1.21" ["11.1"]="1.22" ["11.2"]="1.23" ["11.5"]="1.24" ["11.8"]="1.24")
+declare -A CTK_NUMPY_VMAP=( ["11.0"]="1.21" ["11.1"]="1.22" ["11.2"]="1.23" ["11.5"]="1.24" ["11.8"]="1.25")
 NUMPY_VER="${CTK_NUMPY_VMAP[$CUDA_TOOLKIT_VER]}"
 
-# Use conda-forge for NumPy 1.24 - at the time of writing it is not available
-# on the defaults channel.
-
-if [ "${NUMPY}" == "1.24" ]; then
-  NUMPY_CHANNEL_PKG=conda-forge::numpy
-else
-  NUMPY_CHANNEL_PKG=numpy
-fi
+NUMPY_CHANNEL_PKG=numpy
 
 
 ################################################################################

From 733669148916f04b04555bf9013b93ee8e4012d4 Mon Sep 17 00:00:00 2001
From: Andre Masella <andre@masella.name>
Date: Thu, 6 Jul 2023 20:40:35 -0400
Subject: [PATCH 16/17] Restore changes to fancy indexing test

As titled.
---
 numba/tests/test_fancy_indexing.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/numba/tests/test_fancy_indexing.py b/numba/tests/test_fancy_indexing.py
index 5d909963fd0..e160063c045 100644
--- a/numba/tests/test_fancy_indexing.py
+++ b/numba/tests/test_fancy_indexing.py
@@ -406,7 +406,7 @@ def numba_get_item(array, idx):
         expected = get_item(arr, index)
         got = numba_get_item(arr, index)
         # Sanity check: In advanced indexing, the result is always a copy.
-        self.assertNotIn(expected.base, orig_base)
+        self.assertIsNot(expected.base, orig_base)
 
         # Note: Numba may not return the same array strides and
         # contiguity as NumPy

From 0596c21541bce7bb70c922a53831d983ca6704b1 Mon Sep 17 00:00:00 2001
From: Andre Masella <andre@masella.name>
Date: Fri, 7 Jul 2023 16:25:58 -0400
Subject: [PATCH 17/17] Change date comparison behaviour to match NumPy 1.25

As titled.
---
 numba/core/typing/npdatetime.py | 23 ++++++++++++++++-------
 numba/tests/test_npdatetime.py  | 16 ++++++++++++----
 2 files changed, 28 insertions(+), 11 deletions(-)

diff --git a/numba/core/typing/npdatetime.py b/numba/core/typing/npdatetime.py
index 4ab05f43960..8760189f501 100644
--- a/numba/core/typing/npdatetime.py
+++ b/numba/core/typing/npdatetime.py
@@ -11,6 +11,7 @@
                                          AbstractTemplate, infer_global, infer,
                                          infer_getattr, signature)
 from numba.np import npdatetime_helpers
+from numba.np.numpy_support import numpy_version
 
 
 # timedelta64-only operations
@@ -144,13 +145,22 @@ class TimedeltaTrueDiv(TimedeltaDivOp):
 class TimedeltaFloorDiv(TimedeltaDivOp):
     key = operator.floordiv
 
-@infer_global(operator.eq)
-class TimedeltaCmpEq(TimedeltaCmpOp):
-    key = operator.eq
+if numpy_version >= (1, 25):
+    @infer_global(operator.eq)
+    class TimedeltaCmpEq(TimedeltaOrderedCmpOp):
+        key = operator.eq
 
-@infer_global(operator.ne)
-class TimedeltaCmpNe(TimedeltaCmpOp):
-    key = operator.ne
+    @infer_global(operator.ne)
+    class TimedeltaCmpNe(TimedeltaOrderedCmpOp):
+        key = operator.ne
+else:
+    @infer_global(operator.eq)
+    class TimedeltaCmpEq(TimedeltaCmpOp):
+        key = operator.eq
+
+    @infer_global(operator.ne)
+    class TimedeltaCmpNe(TimedeltaCmpOp):
+        key = operator.ne
 
 @infer_global(operator.lt)
 class TimedeltaCmpLt(TimedeltaOrderedCmpOp):
@@ -228,7 +238,6 @@ def generic(self, args, kws):
         left, right = args
         if isinstance(left, types.NPDatetime) and isinstance(right,
                                                              types.NPDatetime):
-            # All units compatible...
             unit = npdatetime_helpers.get_best_unit(left.unit, right.unit)
             return signature(types.NPTimedelta(unit), left, right)
 
diff --git a/numba/tests/test_npdatetime.py b/numba/tests/test_npdatetime.py
index 022f3ad3131..1ffd000aee8 100644
--- a/numba/tests/test_npdatetime.py
+++ b/numba/tests/test_npdatetime.py
@@ -411,10 +411,18 @@ def check(a, b, expected):
         check(TD('Nat', 'ms'), TD('Nat', 's'), True)
         check(TD('Nat'), TD(1), False)
         # Incompatible units => timedeltas compare unequal
-        check(TD(1, 'Y'), TD(365, 'D'), False)
-        check(TD(1, 'Y'), TD(366, 'D'), False)
-        # ... except when both are NaT!
-        check(TD('NaT', 'W'), TD('NaT', 'D'), True)
+        if numpy_version < (1, 25):
+            check(TD(1, 'Y'), TD(365, 'D'), False)
+            check(TD(1, 'Y'), TD(366, 'D'), False)
+            # ... except when both are NaT!
+            check(TD('NaT', 'W'), TD('NaT', 'D'), True)
+        else:
+            # incompatible units raise
+            # The exception is different depending on Python mode
+            with self.assertRaises((TypeError, TypingError)):
+                eq(TD(1, 'Y'), TD(365, 'D'))
+            with self.assertRaises((TypeError, TypingError)):
+                ne(TD(1, 'Y'), TD(365, 'D'))
 
     def test_lt_ge(self):
         lt = self.jit(lt_usecase)
