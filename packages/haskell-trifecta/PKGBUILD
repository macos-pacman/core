# Maintainer: zhiayang <zhiayang@nowhere>

_hkgname=trifecta
pkgname=haskell-${_hkgname}
pkgver=2.1.2
pkgrel=1
pkgdesc="A modern parser combinator library with convenient diagnostics"
url="https://hackage.haskell.org/package/${_hkgname}"
license=('BSD')
arch=('x86_64' 'arm64')
depends=('ghc-libs'
  'haskell-ansi-terminal'
  'haskell-array'
  'haskell-blaze-builder'
  'haskell-blaze-html'
  'haskell-blaze-markup'
  'haskell-bytestring'
  'haskell-charset'
  'haskell-comonad'
  'haskell-containers'
  'haskell-deepseq'
  'haskell-fingertree'
  'haskell-ghc-prim'
  'haskell-hashable'
  'haskell-indexed-traversable'
  'haskell-lens'
  'haskell-mtl'
  'haskell-parsers'
  'haskell-prettyprinter'
  'haskell-prettyprinter-ansi-terminal'
  'haskell-profunctors'
  'haskell-reducers'
  'haskell-transformers'
  'haskell-unordered-containers'
  'haskell-utf8-string'
)
checkdepends=(
  'haskell-quickcheck'
)
makedepends=('ghc' 'uusi')
source=("https://hackage.haskell.org/packages/archive/$_hkgname/$pkgver/$_hkgname-$pkgver.tar.gz")
sha512sums=('33ee39932235d1963b44ce54a59c1b5f193db9f590f30ba272f4e10965582c3602f822328b7e6e98f09ff4d3e14a8e324375353246f3ff0815070a7d94916c2e')

prepare() {
  cd $_hkgname-$pkgver
  uusi -u 'ansi-terminal' -u 'mtl' -u 'transformers' ${_hkgname}.cabal
}

# template start; name=haskell-default; version=1.0;
# default haskell build steps

build() {
# template start; name=haskell-build; version=1.0;
  cd $_hkgname-$pkgver

  local _opts
  if (( CHECKFUNC )) && [ -z ${_notests+x} ]; then
    _opts=('--enable-tests')
  else
    _opts=('--disable-tests')
  fi

  runhaskell Setup configure -O --disable-static --enable-shared --enable-executable-dynamic \
    --prefix=${pacman_root}/usr \
    --docdir=${pacman_root}/usr/share/doc/$pkgname \
    --datasubdir=$pkgname \
    --dynlibdir='$libdir' \
    -ftemplateHaskell --ghc-option=-fllvm --ghc-option=-fhide-source-paths \
    --flags="${_build_flags:-}" \
    "${_opts[@]}"

  runhaskell Setup build $MAKEFLAGS

  if [ -z ${_no_register+x} ]; then
    runhaskell Setup register --gen-script
    runhaskell Setup unregister --gen-script

    sed -i -r -e "s|ghc-pkg.*update[^ ]* |&'--force' |" register.sh
    sed -i -r -e "s|ghc-pkg.*unregister[^ ]* |&'--force' |" unregister.sh
  fi
# template end;
}

check() {
# template start; name=haskell-check; version=1.0;
  cd $_hkgname-$pkgver
  if [ -z ${_notests+x} ]; then
    if [ -z ${_tests_can_fail+x} ]; then
      runhaskell Setup test --show-details=direct
    else
      runhaskell Setup test --show-details=direct || echo "tests failed!"
    fi
  fi
# template end;
}

package() {
# template start; name=haskell-package; version=1.0;
  cd $_hkgname-$pkgver

  if [ -z ${_no_register+x} ]; then
    install -D -m744 register.sh "$pkgdir/${pacman_root}/usr/share/haskell/register/$pkgname.sh"
    install -D -m744 unregister.sh "$pkgdir/${pacman_root}/usr/share/haskell/unregister/${pkgname}.sh"
  fi

  local _license_name=${license_name-LICENSE}

  runhaskell Setup copy --destdir="$pkgdir"

  if [ -z ${_no_license+x} ]; then
    install -D -m644 "${_license_name}" "$pkgdir/${pacman_root}/usr/share/licenses/$pkgname/LICENSE"
    rm "$pkgdir"/${pacman_root}/usr/share/doc/$pkgname/${_license_name}
  fi

  local dl; for dl in ${pkgdir}/${pacman_root}/usr/lib/*.dylib ${pkgdir}/${pacman_root}/usr/bin/* ; do
    [ ! -e "${dl}" ] || fix_rpath "${dl}"
  done
# template end;
}
# template end;

# vim: ts=2 sw=2 et:
